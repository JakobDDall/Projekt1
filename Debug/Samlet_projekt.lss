
Samlet_projekt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800200  000004a0  00000534  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004a0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  0080020c  0080020c  00000540  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000540  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000570  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  000005b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001410  00000000  00000000  000006d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f86  00000000  00000000  00001ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000951  00000000  00000000  00002a6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000234  00000000  00000000  000033c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006ec  00000000  00000000  000035f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003ef  00000000  00000000  00003ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  000040cf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	05 c1       	rjmp	.+522    	; 0x210 <__vector_1>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	fb c0       	rjmp	.+502    	; 0x2a0 <__vector_42>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e0 ea       	ldi	r30, 0xA0	; 160
  fc:	f4 e0       	ldi	r31, 0x04	; 4
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	ac 30       	cpi	r26, 0x0C	; 12
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	ac e0       	ldi	r26, 0x0C	; 12
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a0 31       	cpi	r26, 0x10	; 16
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	64 d0       	rcall	.+200    	; 0x1e8 <main>
 120:	bd c1       	rjmp	.+890    	; 0x49c <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <startCar>:
#include <avr/io.h>


void startCar(void) 
{
		while ((PINA & 1) != 0)		//Bliv her indtil indtil knap 0 trykkes
 124:	02 c0       	rjmp	.+4      	; 0x12a <startCar+0x6>
		{
			UDR2 = 0;				//Sender LOW til SOMO-II. Forhindrer støj/kliklyde. Måske findes et andet fix?
 126:	10 92 d6 00 	sts	0x00D6, r1	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
#include <avr/io.h>


void startCar(void) 
{
		while ((PINA & 1) != 0)		//Bliv her indtil indtil knap 0 trykkes
 12a:	00 99       	sbic	0x00, 0	; 0
 12c:	fc cf       	rjmp	.-8      	; 0x126 <startCar+0x2>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12e:	2f ef       	ldi	r18, 0xFF	; 255
 130:	83 e2       	ldi	r24, 0x23	; 35
 132:	94 ef       	ldi	r25, 0xF4	; 244
 134:	21 50       	subi	r18, 0x01	; 1
 136:	80 40       	sbci	r24, 0x00	; 0
 138:	90 40       	sbci	r25, 0x00	; 0
 13a:	e1 f7       	brne	.-8      	; 0x134 <startCar+0x10>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <startCar+0x1a>
 13e:	00 00       	nop
		{
			UDR2 = 0;				//Sender LOW til SOMO-II. Forhindrer støj/kliklyde. Måske findes et andet fix?
		}
		_delay_ms(5000);
		EngineControl(FORWARD_SPEED);			//Start motor. Max speed
 140:	84 e6       	ldi	r24, 0x64	; 100
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	ce d0       	rcall	.+412    	; 0x2e2 <EngineControl>
		//K?RELYS
		StartLyd();
 146:	2e c1       	rjmp	.+604    	; 0x3a4 <StartLyd>
 148:	08 95       	ret

0000014a <reflexReactions>:
 14a:	86 30       	cpi	r24, 0x06	; 6
}

void reflexReactions(int nReflex)		//Hvordan bilen skal reagere på reflekser
{
	if(nReflex == 6)
 14c:	91 05       	cpc	r25, r1
 14e:	29 f4       	brne	.+10     	; 0x15a <reflexReactions+0x10>
	{
		EngineControl(BACKWARD_SPEED); //Bak
 150:	8c e9       	ldi	r24, 0x9C	; 156
 152:	9f ef       	ldi	r25, 0xFF	; 255
 154:	c6 d0       	rcall	.+396    	; 0x2e2 <EngineControl>
		//BAKLYS
		RefleksLyd();
 156:	50 c1       	rjmp	.+672    	; 0x3f8 <RefleksLyd>
 158:	08 95       	ret
 15a:	88 30       	cpi	r24, 0x08	; 8
	}
	else if(nReflex == 8)
 15c:	91 05       	cpc	r25, r1
 15e:	29 f4       	brne	.+10     	; 0x16a <reflexReactions+0x20>
 160:	84 e6       	ldi	r24, 0x64	; 100
	{
		EngineControl(FORWARD_SPEED); //Frem
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	be d0       	rcall	.+380    	; 0x2e2 <EngineControl>
		//K?RELYS
		RefleksLyd();
 166:	48 c1       	rjmp	.+656    	; 0x3f8 <RefleksLyd>
 168:	08 95       	ret
 16a:	8b 30       	cpi	r24, 0x0B	; 11
	}
	else if(nReflex == 11)
 16c:	91 05       	cpc	r25, r1
 16e:	29 f4       	brne	.+10     	; 0x17a <reflexReactions+0x30>
	{
		EngineControl(0); //Stop
 170:	80 e0       	ldi	r24, 0x00	; 0
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	b6 d0       	rcall	.+364    	; 0x2e2 <EngineControl>
 176:	69 c1       	rjmp	.+722    	; 0x44a <SlutLyd>
		//SLUK LYS
		SlutLyd();
 178:	08 95       	ret
 17a:	18 16       	cp	r1, r24
	}
	else if(nReflex > 0)
 17c:	19 06       	cpc	r1, r25
 17e:	0c f4       	brge	.+2      	; 0x182 <reflexReactions+0x38>
 180:	3b c1       	rjmp	.+630    	; 0x3f8 <RefleksLyd>
	{
		RefleksLyd();
 182:	08 95       	ret

00000184 <n50msTimer>:
 184:	8f e4       	ldi	r24, 0x4F	; 79
 186:	93 ec       	ldi	r25, 0xC3	; 195
}


void n50msTimer(void)	//Initialiser 50msTimer
{
	OCR4A = 49999;			//Passende compare value for et compare match hvert 50. ms, med prescaler på 8
 188:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7c00a9>
 18c:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7c00a8>
	TCCR4A = 0b00000000;	//bit 7-2: compare output mode for channel A-B-C. Her er alle disconnected. Bit 0-1 er bit 0 og 1 af waveform generation mode.
 190:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
	TCCR4B = 0b00001010;	//Bit 3-4 er bit 2 og 3 af waveform generation mode. Bit 0-2 sætter prescaler.
 194:	8a e0       	ldi	r24, 0x0A	; 10
 196:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7c00a1>
	TIMSK4 = 0b00000010;	//Bit 1-3: Compare match interrupt enable.
 19a:	82 e0       	ldi	r24, 0x02	; 2
 19c:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x7c0072>
 1a0:	08 95       	ret

000001a2 <initLEDport>:
}

void writeAllLEDs(unsigned char pattern)
{
	// Hent parameteren og skriv til lysdioderne
	PORTB = pattern;
 1a2:	8f ef       	ldi	r24, 0xFF	; 255
 1a4:	84 b9       	out	0x04, r24	; 4
 1a6:	15 b8       	out	0x05, r1	; 5
 1a8:	08 95       	ret

000001aa <turnOnLED>:
void turnOnLED(unsigned char led_nr)
{
	// Lokal variabel
	unsigned char mask;
	// Vi skal kun lave noget, hvis led_nr < 8
	if (led_nr <= MAX_LED_NR)
 1aa:	88 30       	cpi	r24, 0x08	; 8
 1ac:	60 f4       	brcc	.+24     	; 0x1c6 <turnOnLED+0x1c>
	{
		// Dan maske på basis af parameteren (led_nr)
		mask = 0b00000001 << led_nr;
 1ae:	21 e0       	ldi	r18, 0x01	; 1
 1b0:	30 e0       	ldi	r19, 0x00	; 0
 1b2:	a9 01       	movw	r20, r18
 1b4:	02 c0       	rjmp	.+4      	; 0x1ba <turnOnLED+0x10>
 1b6:	44 0f       	add	r20, r20
 1b8:	55 1f       	adc	r21, r21
 1ba:	8a 95       	dec	r24
 1bc:	e2 f7       	brpl	.-8      	; 0x1b6 <turnOnLED+0xc>
 1be:	ca 01       	movw	r24, r20
		// Tænd den aktuelle lysdiode (de andre ændres ikke)
		PORTB = PINB | mask;
 1c0:	93 b1       	in	r25, 0x03	; 3
 1c2:	89 2b       	or	r24, r25
 1c4:	85 b9       	out	0x05, r24	; 5
 1c6:	08 95       	ret

000001c8 <turnOffLED>:
void turnOffLED(unsigned char led_nr)
{
	// Lokal variabel
	unsigned char mask;
	// Vi skal kun lave noget, hvis led_nr < 8
	if (led_nr <= MAX_LED_NR)
 1c8:	88 30       	cpi	r24, 0x08	; 8
 1ca:	68 f4       	brcc	.+26     	; 0x1e6 <turnOffLED+0x1e>
	{
		// Dan (inverteret) maske på basis af parameteren (led_nr)
		mask = ~(0b00000001 << led_nr);
 1cc:	21 e0       	ldi	r18, 0x01	; 1
 1ce:	30 e0       	ldi	r19, 0x00	; 0
 1d0:	a9 01       	movw	r20, r18
 1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <turnOffLED+0x10>
 1d4:	44 0f       	add	r20, r20
 1d6:	55 1f       	adc	r21, r21
 1d8:	8a 95       	dec	r24
 1da:	e2 f7       	brpl	.-8      	; 0x1d4 <turnOffLED+0xc>
 1dc:	ca 01       	movw	r24, r20
 1de:	80 95       	com	r24
		// Sluk den aktuelle lysdiode (de andre ændres ikke)
		PORTB = PINB & mask;
 1e0:	93 b1       	in	r25, 0x03	; 3
 1e2:	89 23       	and	r24, r25
 1e4:	85 b9       	out	0x05, r24	; 5
 1e6:	08 95       	ret

000001e8 <main>:


#define REFLEX_DELAY 6 // Ganges med 50. Antal millisekunder, hvor ny refleks ikke man måles.
int main(void)
{
	sei();
 1e8:	78 94       	sei
    //-------------------------------------------- Initialisering --------------------------------------------
	
	//---------------Lyd-----------
	initUART();
 1ea:	cc d0       	rcall	.+408    	; 0x384 <initUART>
	
	//--------------Motor----------
	InitEngine();
 1ec:	70 d0       	rcall	.+224    	; 0x2ce <InitEngine>
	
	//---------------Lys-----------
	
	
	//--------------Refleks-----------
	initRefleks();
 1ee:	b0 d0       	rcall	.+352    	; 0x350 <initRefleks>
	
	//-------------50msTimer----------
	n50msTimer();
 1f0:	c9 df       	rcall	.-110    	; 0x184 <n50msTimer>
	
	// ---------MEGA2560 LEDs---------
	initLEDport();
 1f2:	d7 df       	rcall	.-82     	; 0x1a2 <initLEDport>
 1f4:	11 b8       	out	0x01, r1	; 1
	
	//--------PORTA as input--------
	DDRA = 0;
 1f6:	96 df       	rcall	.-212    	; 0x124 <startCar>
	
	
	// ------------------------ Start bil -----------------------------
	startCar();
 1f8:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <reflexCount>
	// -------------------------------------- Main program loop ---------------------------------------------
	while(1)
	{
		
		if(reflexCount % 2 == 0)	//Til test af reflexCount. Hvis lige antal lyser Led 7
 1fc:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <reflexCount+0x1>
 200:	80 fd       	sbrc	r24, 0
 202:	03 c0       	rjmp	.+6      	; 0x20a <main+0x22>
			turnOnLED(7);
 204:	87 e0       	ldi	r24, 0x07	; 7
 206:	d1 df       	rcall	.-94     	; 0x1aa <turnOnLED>
 208:	f7 cf       	rjmp	.-18     	; 0x1f8 <main+0x10>
 20a:	87 e0       	ldi	r24, 0x07	; 7
		else
			turnOffLED(7);
 20c:	dd df       	rcall	.-70     	; 0x1c8 <turnOffLED>
 20e:	f4 cf       	rjmp	.-24     	; 0x1f8 <main+0x10>

00000210 <__vector_1>:
 210:	1f 92       	push	r1
 212:	0f 92       	push	r0
}



ISR(INT0_vect)	//REFLEX1 interrupt rutine. Kommandoer kun hvis tid siden sidste refleks > 500ms 
{
 214:	0f b6       	in	r0, 0x3f	; 63
 216:	0f 92       	push	r0
 218:	11 24       	eor	r1, r1
 21a:	0b b6       	in	r0, 0x3b	; 59
 21c:	0f 92       	push	r0
 21e:	2f 93       	push	r18
 220:	3f 93       	push	r19
 222:	4f 93       	push	r20
 224:	5f 93       	push	r21
 226:	6f 93       	push	r22
 228:	7f 93       	push	r23
 22a:	8f 93       	push	r24
 22c:	9f 93       	push	r25
 22e:	af 93       	push	r26
 230:	bf 93       	push	r27
 232:	ef 93       	push	r30
 234:	ff 93       	push	r31
	if(n50ms - lastReflex > REFLEX_DELAY)
 236:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <__data_end>
 23a:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <__data_end+0x1>
 23e:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 242:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 246:	82 1b       	sub	r24, r18
 248:	93 0b       	sbc	r25, r19
 24a:	07 97       	sbiw	r24, 0x07	; 7
 24c:	b4 f0       	brlt	.+44     	; 0x27a <__vector_1+0x6a>
	{
		lastReflex = n50ms; //Gem tiden
 24e:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <__data_end>
 252:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <__data_end+0x1>
 256:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 25a:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
		reflexCount++;		//Increment counter
 25e:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <reflexCount>
 262:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <reflexCount+0x1>
 266:	01 96       	adiw	r24, 0x01	; 1
 268:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <reflexCount+0x1>
 26c:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <reflexCount>
		reflexReactions(reflexCount);	//Få bilen til at reagere
 270:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <reflexCount>
 274:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <reflexCount+0x1>
 278:	68 df       	rcall	.-304    	; 0x14a <reflexReactions>
	}
}
 27a:	ff 91       	pop	r31
 27c:	ef 91       	pop	r30
 27e:	bf 91       	pop	r27
 280:	af 91       	pop	r26
 282:	9f 91       	pop	r25
 284:	8f 91       	pop	r24
 286:	7f 91       	pop	r23
 288:	6f 91       	pop	r22
 28a:	5f 91       	pop	r21
 28c:	4f 91       	pop	r20
 28e:	3f 91       	pop	r19
 290:	2f 91       	pop	r18
 292:	0f 90       	pop	r0
 294:	0b be       	out	0x3b, r0	; 59
 296:	0f 90       	pop	r0
 298:	0f be       	out	0x3f, r0	; 63
 29a:	0f 90       	pop	r0
 29c:	1f 90       	pop	r1
 29e:	18 95       	reti

000002a0 <__vector_42>:

ISR(TIMER4_COMPA_vect)			//50msTimer tæller op ved compare match
{
 2a0:	1f 92       	push	r1
 2a2:	0f 92       	push	r0
 2a4:	0f b6       	in	r0, 0x3f	; 63
 2a6:	0f 92       	push	r0
 2a8:	11 24       	eor	r1, r1
 2aa:	8f 93       	push	r24
 2ac:	9f 93       	push	r25
	n50ms++;
 2ae:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <__data_end>
 2b2:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <__data_end+0x1>
 2b6:	01 96       	adiw	r24, 0x01	; 1
 2b8:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <__data_end+0x1>
 2bc:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <__data_end>
}
 2c0:	9f 91       	pop	r25
 2c2:	8f 91       	pop	r24
 2c4:	0f 90       	pop	r0
 2c6:	0f be       	out	0x3f, r0	; 63
 2c8:	0f 90       	pop	r0
 2ca:	1f 90       	pop	r1
 2cc:	18 95       	reti

000002ce <InitEngine>:
 */ 

#include <avr/io.h>

void InitEngine(void){
	DDRB = 0xFF; //port B as output
 2ce:	8f ef       	ldi	r24, 0xFF	; 255
 2d0:	84 b9       	out	0x04, r24	; 4
	PORTB = 0; //clear
 2d2:	15 b8       	out	0x05, r1	; 5
	TCCR1A = 0b10100011; //PIN A og PIN B
 2d4:	83 ea       	ldi	r24, 0xA3	; 163
 2d6:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
	TCCR1B = 0b00000010; // 1kHz
 2da:	82 e0       	ldi	r24, 0x02	; 2
 2dc:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7c0081>
 2e0:	08 95       	ret

000002e2 <EngineControl>:
}


void EngineControl(int Speed){
	
	if(Speed > 0){
 2e2:	18 16       	cp	r1, r24
 2e4:	19 06       	cpc	r1, r25
 2e6:	ac f4       	brge	.+42     	; 0x312 <EngineControl+0x30>
		OCR1B = 0;
 2e8:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7c008b>
 2ec:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7c008a>
		OCR1A = (Speed * 10) + 23;
 2f0:	9c 01       	movw	r18, r24
 2f2:	22 0f       	add	r18, r18
 2f4:	33 1f       	adc	r19, r19
 2f6:	88 0f       	add	r24, r24
 2f8:	99 1f       	adc	r25, r25
 2fa:	88 0f       	add	r24, r24
 2fc:	99 1f       	adc	r25, r25
 2fe:	88 0f       	add	r24, r24
 300:	99 1f       	adc	r25, r25
 302:	82 0f       	add	r24, r18
 304:	93 1f       	adc	r25, r19
 306:	47 96       	adiw	r24, 0x17	; 23
 308:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 30c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
 310:	08 95       	ret
	} else if (Speed < 0){
 312:	99 23       	and	r25, r25
 314:	94 f4       	brge	.+36     	; 0x33a <EngineControl+0x58>
		OCR1A = 0;
 316:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 31a:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
		OCR1B = (Speed * -10) + 23;
 31e:	46 ef       	ldi	r20, 0xF6	; 246
 320:	bc 01       	movw	r22, r24
 322:	46 03       	mulsu	r20, r22
 324:	90 01       	movw	r18, r0
 326:	47 9f       	mul	r20, r23
 328:	30 0d       	add	r19, r0
 32a:	11 24       	eor	r1, r1
 32c:	c9 01       	movw	r24, r18
 32e:	47 96       	adiw	r24, 0x17	; 23
 330:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7c008b>
 334:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7c008a>
 338:	08 95       	ret
	} else if (Speed == 0){
 33a:	89 2b       	or	r24, r25
 33c:	41 f4       	brne	.+16     	; 0x34e <EngineControl+0x6c>
		OCR1A = 0;
 33e:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 342:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
		OCR1B = 0;
 346:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7c008b>
 34a:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7c008a>
 34e:	08 95       	ret

00000350 <initRefleks>:
#include "reflex.h"

void initRefleks()
{
	// INT0 og INT1: rising edge
	EICRA = 0b00000011;
 350:	83 e0       	ldi	r24, 0x03	; 3
 352:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
	// Enable extern interrupts INT0 og INT1
	EIMSK = 0b00000001;
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	8d bb       	out	0x1d, r24	; 29
 35a:	08 95       	ret

0000035c <SendCommand>:
	SendCommand(volMax);
}


void SendCommand(unsigned char command[])
{
 35c:	ac 01       	movw	r20, r24
	for(int i = 0; i<ARRAYSIZE; i++)
 35e:	20 e0       	ldi	r18, 0x00	; 0
 360:	30 e0       	ldi	r19, 0x00	; 0
 362:	0c c0       	rjmp	.+24     	; 0x37c <SendCommand+0x20>
	{
		while((UCSR2A & 0b00100000)==0)	 //Vent pï¿½ register er klar til at modtage byte
 364:	90 91 d0 00 	lds	r25, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7c00d0>
 368:	95 ff       	sbrs	r25, 5
 36a:	fc cf       	rjmp	.-8      	; 0x364 <SendCommand+0x8>
		{}
		UDR2 = command[i];
 36c:	fa 01       	movw	r30, r20
 36e:	e2 0f       	add	r30, r18
 370:	f3 1f       	adc	r31, r19
 372:	90 81       	ld	r25, Z
 374:	90 93 d6 00 	sts	0x00D6, r25	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
}


void SendCommand(unsigned char command[])
{
	for(int i = 0; i<ARRAYSIZE; i++)
 378:	2f 5f       	subi	r18, 0xFF	; 255
 37a:	3f 4f       	sbci	r19, 0xFF	; 255
 37c:	28 30       	cpi	r18, 0x08	; 8
 37e:	31 05       	cpc	r19, r1
 380:	8c f3       	brlt	.-30     	; 0x364 <SendCommand+0x8>
		{}
		UDR2 = command[i];
	}
	
	
}
 382:	08 95       	ret

00000384 <initUART>:



void initUART()
{
	UBRR2 = F_CPU/(16*(long int)9600) - 1; // Sï¿½t baud rate af output
 384:	87 e6       	ldi	r24, 0x67	; 103
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	90 93 d5 00 	sts	0x00D5, r25	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7c00d5>
 38c:	80 93 d4 00 	sts	0x00D4, r24	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7c00d4>
	UCSR2B = 0b00011000;
 390:	88 e1       	ldi	r24, 0x18	; 24
 392:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7c00d1>
	UCSR2C = 0b00000110;
 396:	86 e0       	ldi	r24, 0x06	; 6
 398:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7c00d2>

	SendCommand(volMax);
 39c:	82 e0       	ldi	r24, 0x02	; 2
 39e:	92 e0       	ldi	r25, 0x02	; 2
 3a0:	dd cf       	rjmp	.-70     	; 0x35c <SendCommand>
 3a2:	08 95       	ret

000003a4 <StartLyd>:
	
}


void StartLyd()
{
 3a4:	cf 93       	push	r28
 3a6:	df 93       	push	r29
 3a8:	cd b7       	in	r28, 0x3d	; 61
 3aa:	de b7       	in	r29, 0x3e	; 62
 3ac:	29 97       	sbiw	r28, 0x09	; 9
 3ae:	0f b6       	in	r0, 0x3f	; 63
 3b0:	f8 94       	cli
 3b2:	de bf       	out	0x3e, r29	; 62
 3b4:	0f be       	out	0x3f, r0	; 63
 3b6:	cd bf       	out	0x3d, r28	; 61
	unsigned char startSound[ARRAYSIZE+1] = {0x7E,0x0F,0x01,0x01,0x01,0xFF,0xEE,0xEF};		//Startlyden ligger i mappe 01, er fil 001. "7E 0F 00 01 01 FF EF EF".
 3b8:	fe 01       	movw	r30, r28
 3ba:	31 96       	adiw	r30, 0x01	; 1
 3bc:	89 e0       	ldi	r24, 0x09	; 9
 3be:	df 01       	movw	r26, r30
 3c0:	1d 92       	st	X+, r1
 3c2:	8a 95       	dec	r24
 3c4:	e9 f7       	brne	.-6      	; 0x3c0 <StartLyd+0x1c>
 3c6:	8e e7       	ldi	r24, 0x7E	; 126
 3c8:	89 83       	std	Y+1, r24	; 0x01
 3ca:	8f e0       	ldi	r24, 0x0F	; 15
 3cc:	8a 83       	std	Y+2, r24	; 0x02
 3ce:	91 e0       	ldi	r25, 0x01	; 1
 3d0:	9b 83       	std	Y+3, r25	; 0x03
 3d2:	9c 83       	std	Y+4, r25	; 0x04
 3d4:	9d 83       	std	Y+5, r25	; 0x05
 3d6:	8f ef       	ldi	r24, 0xFF	; 255
 3d8:	8e 83       	std	Y+6, r24	; 0x06
 3da:	8e ee       	ldi	r24, 0xEE	; 238
 3dc:	8f 83       	std	Y+7, r24	; 0x07
 3de:	8f ee       	ldi	r24, 0xEF	; 239
 3e0:	88 87       	std	Y+8, r24	; 0x08
	SendCommand(startSound);
 3e2:	cf 01       	movw	r24, r30
 3e4:	bb df       	rcall	.-138    	; 0x35c <SendCommand>
}
 3e6:	29 96       	adiw	r28, 0x09	; 9
 3e8:	0f b6       	in	r0, 0x3f	; 63
 3ea:	f8 94       	cli
 3ec:	de bf       	out	0x3e, r29	; 62
 3ee:	0f be       	out	0x3f, r0	; 63
 3f0:	cd bf       	out	0x3d, r28	; 61
 3f2:	df 91       	pop	r29
 3f4:	cf 91       	pop	r28
 3f6:	08 95       	ret

000003f8 <RefleksLyd>:


void RefleksLyd()
{
 3f8:	cf 93       	push	r28
 3fa:	df 93       	push	r29
 3fc:	cd b7       	in	r28, 0x3d	; 61
 3fe:	de b7       	in	r29, 0x3e	; 62
 400:	29 97       	sbiw	r28, 0x09	; 9
 402:	0f b6       	in	r0, 0x3f	; 63
 404:	f8 94       	cli
 406:	de bf       	out	0x3e, r29	; 62
 408:	0f be       	out	0x3f, r0	; 63
 40a:	cd bf       	out	0x3d, r28	; 61
	unsigned char reflexSound[ARRAYSIZE+1] = {0x7E,0x0F,0x00,0x01,0x02,0xFF,0xEE,0xEF};		//Reflexlyden ligger i mappe 01, er fil 002. "7E 0F 00 01 02 FF EF EF".
 40c:	ce 01       	movw	r24, r28
 40e:	01 96       	adiw	r24, 0x01	; 1
 410:	29 e0       	ldi	r18, 0x09	; 9
 412:	fc 01       	movw	r30, r24
 414:	11 92       	st	Z+, r1
 416:	2a 95       	dec	r18
 418:	e9 f7       	brne	.-6      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 41a:	2e e7       	ldi	r18, 0x7E	; 126
 41c:	29 83       	std	Y+1, r18	; 0x01
 41e:	2f e0       	ldi	r18, 0x0F	; 15
 420:	2a 83       	std	Y+2, r18	; 0x02
 422:	21 e0       	ldi	r18, 0x01	; 1
 424:	2c 83       	std	Y+4, r18	; 0x04
 426:	22 e0       	ldi	r18, 0x02	; 2
 428:	2d 83       	std	Y+5, r18	; 0x05
 42a:	2f ef       	ldi	r18, 0xFF	; 255
 42c:	2e 83       	std	Y+6, r18	; 0x06
 42e:	2e ee       	ldi	r18, 0xEE	; 238
 430:	2f 83       	std	Y+7, r18	; 0x07
 432:	2f ee       	ldi	r18, 0xEF	; 239
 434:	28 87       	std	Y+8, r18	; 0x08
	SendCommand(reflexSound);
 436:	92 df       	rcall	.-220    	; 0x35c <SendCommand>
}
 438:	29 96       	adiw	r28, 0x09	; 9
 43a:	0f b6       	in	r0, 0x3f	; 63
 43c:	f8 94       	cli
 43e:	de bf       	out	0x3e, r29	; 62
 440:	0f be       	out	0x3f, r0	; 63
 442:	cd bf       	out	0x3d, r28	; 61
 444:	df 91       	pop	r29
 446:	cf 91       	pop	r28
 448:	08 95       	ret

0000044a <SlutLyd>:


void SlutLyd()
{
 44a:	cf 93       	push	r28
 44c:	df 93       	push	r29
 44e:	cd b7       	in	r28, 0x3d	; 61
 450:	de b7       	in	r29, 0x3e	; 62
 452:	29 97       	sbiw	r28, 0x09	; 9
 454:	0f b6       	in	r0, 0x3f	; 63
 456:	f8 94       	cli
 458:	de bf       	out	0x3e, r29	; 62
 45a:	0f be       	out	0x3f, r0	; 63
 45c:	cd bf       	out	0x3d, r28	; 61
	unsigned char finishSound[ARRAYSIZE+1] = {0x7E,0x0F,0x00,0x01,0x03,0xFF,0xED,0xEF};		//Fï¿½rdiglyden ligger i mappe 01, er fil 003. "7E 0F 00 01 03 FF EF EF".
 45e:	ce 01       	movw	r24, r28
 460:	01 96       	adiw	r24, 0x01	; 1
 462:	29 e0       	ldi	r18, 0x09	; 9
 464:	fc 01       	movw	r30, r24
 466:	11 92       	st	Z+, r1
 468:	2a 95       	dec	r18
 46a:	e9 f7       	brne	.-6      	; 0x466 <SlutLyd+0x1c>
 46c:	2e e7       	ldi	r18, 0x7E	; 126
 46e:	29 83       	std	Y+1, r18	; 0x01
 470:	2f e0       	ldi	r18, 0x0F	; 15
 472:	2a 83       	std	Y+2, r18	; 0x02
 474:	21 e0       	ldi	r18, 0x01	; 1
 476:	2c 83       	std	Y+4, r18	; 0x04
 478:	23 e0       	ldi	r18, 0x03	; 3
 47a:	2d 83       	std	Y+5, r18	; 0x05
 47c:	2f ef       	ldi	r18, 0xFF	; 255
 47e:	2e 83       	std	Y+6, r18	; 0x06
 480:	2d ee       	ldi	r18, 0xED	; 237
 482:	2f 83       	std	Y+7, r18	; 0x07
 484:	2f ee       	ldi	r18, 0xEF	; 239
 486:	28 87       	std	Y+8, r18	; 0x08
	SendCommand(finishSound);
 488:	69 df       	rcall	.-302    	; 0x35c <SendCommand>
 48a:	29 96       	adiw	r28, 0x09	; 9
 48c:	0f b6       	in	r0, 0x3f	; 63
 48e:	f8 94       	cli
 490:	de bf       	out	0x3e, r29	; 62
 492:	0f be       	out	0x3f, r0	; 63
 494:	cd bf       	out	0x3d, r28	; 61
 496:	df 91       	pop	r29
 498:	cf 91       	pop	r28
 49a:	08 95       	ret

0000049c <_exit>:
 49c:	f8 94       	cli

0000049e <__stop_program>:
 49e:	ff cf       	rjmp	.-2      	; 0x49e <__stop_program>

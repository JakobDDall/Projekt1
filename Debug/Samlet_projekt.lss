
Samlet_projekt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800200  00000492  00000526  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000492  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  0080020c  0080020c  00000532  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000532  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000564  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000130  00000000  00000000  000005a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013a5  00000000  00000000  000006d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f11  00000000  00000000  00001a79  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000878  00000000  00000000  0000298a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000244  00000000  00000000  00003204  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006cf  00000000  00000000  00003448  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003a7  00000000  00000000  00003b17  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00003ebe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	fe c0       	rjmp	.+508    	; 0x202 <__vector_1>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	f4 c0       	rjmp	.+488    	; 0x292 <__vector_42>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e2 e9       	ldi	r30, 0x92	; 146
  fc:	f4 e0       	ldi	r31, 0x04	; 4
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	ac 30       	cpi	r26, 0x0C	; 12
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	ac e0       	ldi	r26, 0x0C	; 12
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a0 31       	cpi	r26, 0x10	; 16
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	63 d0       	rcall	.+198    	; 0x1e6 <main>
 120:	b6 c1       	rjmp	.+876    	; 0x48e <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <startCar>:



void startCar(void) 
{
		while ((PINA & 1) != 0)		//Bliv her indtil indtil knap 0 trykkes
 124:	02 c0       	rjmp	.+4      	; 0x12a <startCar+0x6>
		{
			UDR2 = 0;				//Sender LOW til SOMO-II. Forhindrer støj/kliklyde. Måske findes et andet fix?
 126:	10 92 d6 00 	sts	0x00D6, r1	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>



void startCar(void) 
{
		while ((PINA & 1) != 0)		//Bliv her indtil indtil knap 0 trykkes
 12a:	00 99       	sbic	0x00, 0	; 0
 12c:	fc cf       	rjmp	.-8      	; 0x126 <startCar+0x2>
		{
			UDR2 = 0;				//Sender LOW til SOMO-II. Forhindrer støj/kliklyde. Måske findes et andet fix?
		}
		//_delay_ms(5000);
		engineControl(FORWARD_SPEED);			//Start motor. Max speed
 12e:	84 e6       	ldi	r24, 0x64	; 100
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	d0 d0       	rcall	.+416    	; 0x2d4 <engineControl>
		//K?RELYS
		startSound();
 134:	30 c1       	rjmp	.+608    	; 0x396 <startSound>
 136:	08 95       	ret

00000138 <reflexReactions>:
 138:	86 30       	cpi	r24, 0x06	; 6
}

void reflexReactions(int nReflex)		//Hvordan bilen skal reagere på reflekser
{
	if(nReflex == 6)
 13a:	91 05       	cpc	r25, r1
 13c:	29 f4       	brne	.+10     	; 0x148 <reflexReactions+0x10>
	{
		engineControl(BACKWARD_SPEED); //Bak
 13e:	8c e9       	ldi	r24, 0x9C	; 156
 140:	9f ef       	ldi	r25, 0xFF	; 255
 142:	c8 d0       	rcall	.+400    	; 0x2d4 <engineControl>
		//BAKLYS
		reflexSound();
 144:	52 c1       	rjmp	.+676    	; 0x3ea <reflexSound>
 146:	08 95       	ret
 148:	88 30       	cpi	r24, 0x08	; 8
	}
	else if(nReflex == 8)
 14a:	91 05       	cpc	r25, r1
 14c:	29 f4       	brne	.+10     	; 0x158 <reflexReactions+0x20>
 14e:	84 e6       	ldi	r24, 0x64	; 100
	{
		engineControl(FORWARD_SPEED); //Frem
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	c0 d0       	rcall	.+384    	; 0x2d4 <engineControl>
		//K?RELYS
		reflexSound();
 154:	4a c1       	rjmp	.+660    	; 0x3ea <reflexSound>
 156:	08 95       	ret
 158:	8b 30       	cpi	r24, 0x0B	; 11
	}
	else if(nReflex == 11)
 15a:	91 05       	cpc	r25, r1
 15c:	29 f4       	brne	.+10     	; 0x168 <reflexReactions+0x30>
	{
		engineControl(0); //Stop
 15e:	80 e0       	ldi	r24, 0x00	; 0
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	b8 d0       	rcall	.+368    	; 0x2d4 <engineControl>
 164:	6b c1       	rjmp	.+726    	; 0x43c <finishSound>
		//SLUK LYS
		finishSound();
 166:	08 95       	ret
 168:	18 16       	cp	r1, r24
	}
	else if(nReflex > 0)
 16a:	19 06       	cpc	r1, r25
 16c:	0c f4       	brge	.+2      	; 0x170 <reflexReactions+0x38>
 16e:	3d c1       	rjmp	.+634    	; 0x3ea <reflexSound>
	{
		reflexSound();
 170:	08 95       	ret

00000172 <n50msTimer>:
 172:	8f e4       	ldi	r24, 0x4F	; 79
 174:	93 ec       	ldi	r25, 0xC3	; 195
}


void n50msTimer(void)	//Initialiser 50msTimer
{
	OCR4A = 49999;			//Passende compare value for et compare match hvert 50. ms, med prescaler på 8
 176:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7c00a9>
 17a:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7c00a8>
	TCCR4A = 0b00000000;	//bit 7-2: compare output mode for channel A-B-C. Her er alle disconnected. Bit 0-1 er bit 0 og 1 af waveform generation mode.
 17e:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
	TCCR4B = 0b00001010;	//Bit 3-4 er bit 2 og 3 af waveform generation mode. Bit 0-2 sætter prescaler.
 182:	8a e0       	ldi	r24, 0x0A	; 10
 184:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7c00a1>
	TIMSK4 = 0b00000010;	//Bit 1-3: Compare match interrupt enable.
 188:	82 e0       	ldi	r24, 0x02	; 2
 18a:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x7c0072>
 18e:	08 95       	ret

00000190 <initCar>:



void initCar(void)
{
		sei();
 190:	78 94       	sei
		//-------------------------------------------- Initialisering --------------------------------------------
		
		//---------------Lyd-----------
		initUART();
 192:	f1 d0       	rcall	.+482    	; 0x376 <initUART>
		
		//--------------Motor----------
		initEngine();
 194:	95 d0       	rcall	.+298    	; 0x2c0 <initEngine>
		
		//---------------Lys-----------
		
		
		//--------------Refleks-----------
		initReflex();
 196:	d5 d0       	rcall	.+426    	; 0x342 <initReflex>
		
		//-------------50msTimer----------
		n50msTimer();
 198:	ec df       	rcall	.-40     	; 0x172 <n50msTimer>
 19a:	02 d0       	rcall	.+4      	; 0x1a0 <initLEDport>
		
		// ---------MEGA2560 LEDs---------
		initLEDport();
 19c:	11 b8       	out	0x01, r1	; 1
 19e:	08 95       	ret

000001a0 <initLEDport>:
		
		//--------PORTA as input--------
		DDRA = 0;
 1a0:	8f ef       	ldi	r24, 0xFF	; 255
 1a2:	84 b9       	out	0x04, r24	; 4
 1a4:	15 b8       	out	0x05, r1	; 5
 1a6:	08 95       	ret

000001a8 <turnOnLED>:
 1a8:	88 30       	cpi	r24, 0x08	; 8
 1aa:	60 f4       	brcc	.+24     	; 0x1c4 <turnOnLED+0x1c>
 1ac:	21 e0       	ldi	r18, 0x01	; 1
 1ae:	30 e0       	ldi	r19, 0x00	; 0
 1b0:	a9 01       	movw	r20, r18
 1b2:	02 c0       	rjmp	.+4      	; 0x1b8 <turnOnLED+0x10>
 1b4:	44 0f       	add	r20, r20
 1b6:	55 1f       	adc	r21, r21
 1b8:	8a 95       	dec	r24
 1ba:	e2 f7       	brpl	.-8      	; 0x1b4 <turnOnLED+0xc>
 1bc:	ca 01       	movw	r24, r20
 1be:	93 b1       	in	r25, 0x03	; 3
 1c0:	89 2b       	or	r24, r25
 1c2:	85 b9       	out	0x05, r24	; 5
 1c4:	08 95       	ret

000001c6 <turnOffLED>:
 1c6:	88 30       	cpi	r24, 0x08	; 8
 1c8:	68 f4       	brcc	.+26     	; 0x1e4 <turnOffLED+0x1e>
 1ca:	21 e0       	ldi	r18, 0x01	; 1
 1cc:	30 e0       	ldi	r19, 0x00	; 0
 1ce:	a9 01       	movw	r20, r18
 1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <turnOffLED+0x10>
 1d2:	44 0f       	add	r20, r20
 1d4:	55 1f       	adc	r21, r21
 1d6:	8a 95       	dec	r24
 1d8:	e2 f7       	brpl	.-8      	; 0x1d2 <turnOffLED+0xc>
 1da:	ca 01       	movw	r24, r20
 1dc:	80 95       	com	r24
 1de:	93 b1       	in	r25, 0x03	; 3
 1e0:	89 23       	and	r24, r25
 1e2:	85 b9       	out	0x05, r24	; 5
 1e4:	08 95       	ret

000001e6 <main>:

#define REFLEX_DELAY 6 // Ganges med 50. Antal millisekunder, hvor ny refleks ikke man måles.
int main(void)
{
	// ------------------------ Initialize ---------------------------
	initCar();
 1e6:	d4 df       	rcall	.-88     	; 0x190 <initCar>
	// ------------------------ Start bil -----------------------------
	startCar();
 1e8:	9d df       	rcall	.-198    	; 0x124 <startCar>
 1ea:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <reflexCount>
	// -------------------------------------- Main program loop ---------------------------------------------
	while(1)
	{
		
		if(reflexCount % 2 == 0)	//Til test af reflexCount. Hvis lige antal lyser Led 7
 1ee:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <reflexCount+0x1>
 1f2:	80 fd       	sbrc	r24, 0
 1f4:	03 c0       	rjmp	.+6      	; 0x1fc <main+0x16>
			turnOnLED(7);
 1f6:	87 e0       	ldi	r24, 0x07	; 7
 1f8:	d7 df       	rcall	.-82     	; 0x1a8 <turnOnLED>
 1fa:	f7 cf       	rjmp	.-18     	; 0x1ea <main+0x4>
		else
			turnOffLED(7);
 1fc:	87 e0       	ldi	r24, 0x07	; 7
 1fe:	e3 df       	rcall	.-58     	; 0x1c6 <turnOffLED>
 200:	f4 cf       	rjmp	.-24     	; 0x1ea <main+0x4>

00000202 <__vector_1>:
 202:	1f 92       	push	r1
	}
}

ISR(INT0_vect)	//REFLEX1 interrupt rutine. Kommandoer kun hvis tid siden sidste refleks > 500ms 
{
 204:	0f 92       	push	r0
 206:	0f b6       	in	r0, 0x3f	; 63
 208:	0f 92       	push	r0
 20a:	11 24       	eor	r1, r1
 20c:	0b b6       	in	r0, 0x3b	; 59
 20e:	0f 92       	push	r0
 210:	2f 93       	push	r18
 212:	3f 93       	push	r19
 214:	4f 93       	push	r20
 216:	5f 93       	push	r21
 218:	6f 93       	push	r22
 21a:	7f 93       	push	r23
 21c:	8f 93       	push	r24
 21e:	9f 93       	push	r25
 220:	af 93       	push	r26
 222:	bf 93       	push	r27
 224:	ef 93       	push	r30
 226:	ff 93       	push	r31
	if(n50ms - lastReflex > REFLEX_DELAY)
 228:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <__data_end>
 22c:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <__data_end+0x1>
 230:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 234:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 238:	82 1b       	sub	r24, r18
 23a:	93 0b       	sbc	r25, r19
 23c:	07 97       	sbiw	r24, 0x07	; 7
 23e:	b4 f0       	brlt	.+44     	; 0x26c <__vector_1+0x6a>
	{
		lastReflex = n50ms; //Gem tiden
 240:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <__data_end>
 244:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <__data_end+0x1>
 248:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 24c:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
		reflexCount++;		//Increment counter
 250:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <reflexCount>
 254:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <reflexCount+0x1>
 258:	01 96       	adiw	r24, 0x01	; 1
 25a:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <reflexCount+0x1>
 25e:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <reflexCount>
		reflexReactions(reflexCount);	//Få bilen til at reagere
 262:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <reflexCount>
 266:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <reflexCount+0x1>
 26a:	66 df       	rcall	.-308    	; 0x138 <reflexReactions>
	}
}
 26c:	ff 91       	pop	r31
 26e:	ef 91       	pop	r30
 270:	bf 91       	pop	r27
 272:	af 91       	pop	r26
 274:	9f 91       	pop	r25
 276:	8f 91       	pop	r24
 278:	7f 91       	pop	r23
 27a:	6f 91       	pop	r22
 27c:	5f 91       	pop	r21
 27e:	4f 91       	pop	r20
 280:	3f 91       	pop	r19
 282:	2f 91       	pop	r18
 284:	0f 90       	pop	r0
 286:	0b be       	out	0x3b, r0	; 59
 288:	0f 90       	pop	r0
 28a:	0f be       	out	0x3f, r0	; 63
 28c:	0f 90       	pop	r0
 28e:	1f 90       	pop	r1
 290:	18 95       	reti

00000292 <__vector_42>:

ISR(TIMER4_COMPA_vect)			//50msTimer tæller op ved compare match
{
 292:	1f 92       	push	r1
 294:	0f 92       	push	r0
 296:	0f b6       	in	r0, 0x3f	; 63
 298:	0f 92       	push	r0
 29a:	11 24       	eor	r1, r1
 29c:	8f 93       	push	r24
 29e:	9f 93       	push	r25
	n50ms++;
 2a0:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <__data_end>
 2a4:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <__data_end+0x1>
 2a8:	01 96       	adiw	r24, 0x01	; 1
 2aa:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <__data_end+0x1>
 2ae:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <__data_end>
 2b2:	9f 91       	pop	r25
 2b4:	8f 91       	pop	r24
 2b6:	0f 90       	pop	r0
 2b8:	0f be       	out	0x3f, r0	; 63
 2ba:	0f 90       	pop	r0
 2bc:	1f 90       	pop	r1
 2be:	18 95       	reti

000002c0 <initEngine>:
 2c0:	8f ef       	ldi	r24, 0xFF	; 255
 2c2:	84 b9       	out	0x04, r24	; 4
 2c4:	15 b8       	out	0x05, r1	; 5
 2c6:	83 ea       	ldi	r24, 0xA3	; 163
 2c8:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
 2cc:	82 e0       	ldi	r24, 0x02	; 2
 2ce:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7c0081>
 2d2:	08 95       	ret

000002d4 <engineControl>:
 2d4:	18 16       	cp	r1, r24
 2d6:	19 06       	cpc	r1, r25
 2d8:	ac f4       	brge	.+42     	; 0x304 <engineControl+0x30>
 2da:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7c008b>
 2de:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7c008a>
 2e2:	9c 01       	movw	r18, r24
 2e4:	22 0f       	add	r18, r18
 2e6:	33 1f       	adc	r19, r19
 2e8:	88 0f       	add	r24, r24
 2ea:	99 1f       	adc	r25, r25
 2ec:	88 0f       	add	r24, r24
 2ee:	99 1f       	adc	r25, r25
 2f0:	88 0f       	add	r24, r24
 2f2:	99 1f       	adc	r25, r25
 2f4:	82 0f       	add	r24, r18
 2f6:	93 1f       	adc	r25, r19
 2f8:	47 96       	adiw	r24, 0x17	; 23
 2fa:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 2fe:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
 302:	08 95       	ret
 304:	99 23       	and	r25, r25
 306:	94 f4       	brge	.+36     	; 0x32c <engineControl+0x58>
 308:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 30c:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
 310:	46 ef       	ldi	r20, 0xF6	; 246
 312:	bc 01       	movw	r22, r24
 314:	46 03       	mulsu	r20, r22
 316:	90 01       	movw	r18, r0
 318:	47 9f       	mul	r20, r23
 31a:	30 0d       	add	r19, r0
 31c:	11 24       	eor	r1, r1
 31e:	c9 01       	movw	r24, r18
 320:	47 96       	adiw	r24, 0x17	; 23
 322:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7c008b>
 326:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7c008a>
 32a:	08 95       	ret
 32c:	89 2b       	or	r24, r25
 32e:	41 f4       	brne	.+16     	; 0x340 <engineControl+0x6c>
 330:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 334:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
 338:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7c008b>
 33c:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7c008a>
 340:	08 95       	ret

00000342 <initReflex>:
#include "reflex.h"

void initReflex()
{
	// INT0: rising edge
	EICRA = 0b00000011;
 342:	83 e0       	ldi	r24, 0x03	; 3
 344:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
	// Enable extern interrupts INT0
	EIMSK = 0b00000001;
 348:	81 e0       	ldi	r24, 0x01	; 1
 34a:	8d bb       	out	0x1d, r24	; 29
 34c:	08 95       	ret

0000034e <sendCommand>:
	sendCommand(volMax);
}


void sendCommand(unsigned char command[])
{
 34e:	ac 01       	movw	r20, r24
	for(int i = 0; i<ARRAYSIZE; i++)
 350:	20 e0       	ldi	r18, 0x00	; 0
 352:	30 e0       	ldi	r19, 0x00	; 0
 354:	0c c0       	rjmp	.+24     	; 0x36e <sendCommand+0x20>
	{
		while((UCSR2A & 0b00100000)==0)	 //Vent pï¿½ register er klar til at modtage byte
 356:	90 91 d0 00 	lds	r25, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7c00d0>
 35a:	95 ff       	sbrs	r25, 5
 35c:	fc cf       	rjmp	.-8      	; 0x356 <sendCommand+0x8>
		{}
		UDR2 = command[i];
 35e:	fa 01       	movw	r30, r20
 360:	e2 0f       	add	r30, r18
 362:	f3 1f       	adc	r31, r19
 364:	90 81       	ld	r25, Z
 366:	90 93 d6 00 	sts	0x00D6, r25	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
}


void sendCommand(unsigned char command[])
{
	for(int i = 0; i<ARRAYSIZE; i++)
 36a:	2f 5f       	subi	r18, 0xFF	; 255
 36c:	3f 4f       	sbci	r19, 0xFF	; 255
 36e:	28 30       	cpi	r18, 0x08	; 8
 370:	31 05       	cpc	r19, r1
 372:	8c f3       	brlt	.-30     	; 0x356 <sendCommand+0x8>
		{}
		UDR2 = command[i];
	}
	
	
}
 374:	08 95       	ret

00000376 <initUART>:
unsigned char volMax[ARRAYSIZE+1] = {0x7E,0x06,0x00,0x00,0x1E,0xFF,0xDC,0xEF};		//Volume max. "7E 06 00 00 1E FF DC EF"


void initUART()
{
	UBRR2 = F_CPU/(16*(long int)9600) - 1; // Sï¿½t baud rate af output
 376:	87 e6       	ldi	r24, 0x67	; 103
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	90 93 d5 00 	sts	0x00D5, r25	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7c00d5>
 37e:	80 93 d4 00 	sts	0x00D4, r24	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7c00d4>
	UCSR2B = 0b00011000;
 382:	88 e1       	ldi	r24, 0x18	; 24
 384:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7c00d1>
	UCSR2C = 0b00000110;
 388:	86 e0       	ldi	r24, 0x06	; 6
 38a:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7c00d2>

	sendCommand(volMax);
 38e:	82 e0       	ldi	r24, 0x02	; 2
 390:	92 e0       	ldi	r25, 0x02	; 2
 392:	dd cf       	rjmp	.-70     	; 0x34e <sendCommand>
 394:	08 95       	ret

00000396 <startSound>:
	
}


void startSound()
{
 396:	cf 93       	push	r28
 398:	df 93       	push	r29
 39a:	cd b7       	in	r28, 0x3d	; 61
 39c:	de b7       	in	r29, 0x3e	; 62
 39e:	29 97       	sbiw	r28, 0x09	; 9
 3a0:	0f b6       	in	r0, 0x3f	; 63
 3a2:	f8 94       	cli
 3a4:	de bf       	out	0x3e, r29	; 62
 3a6:	0f be       	out	0x3f, r0	; 63
 3a8:	cd bf       	out	0x3d, r28	; 61
	unsigned char startSound[ARRAYSIZE+1] = {0x7E,0x0F,0x01,0x01,0x01,0xFF,0xEE,0xEF};		//Startlyden ligger i mappe 01, er fil 001. "7E 0F 00 01 01 FF EF EF".
 3aa:	fe 01       	movw	r30, r28
 3ac:	31 96       	adiw	r30, 0x01	; 1
 3ae:	89 e0       	ldi	r24, 0x09	; 9
 3b0:	df 01       	movw	r26, r30
 3b2:	1d 92       	st	X+, r1
 3b4:	8a 95       	dec	r24
 3b6:	e9 f7       	brne	.-6      	; 0x3b2 <startSound+0x1c>
 3b8:	8e e7       	ldi	r24, 0x7E	; 126
 3ba:	89 83       	std	Y+1, r24	; 0x01
 3bc:	8f e0       	ldi	r24, 0x0F	; 15
 3be:	8a 83       	std	Y+2, r24	; 0x02
 3c0:	91 e0       	ldi	r25, 0x01	; 1
 3c2:	9b 83       	std	Y+3, r25	; 0x03
 3c4:	9c 83       	std	Y+4, r25	; 0x04
 3c6:	9d 83       	std	Y+5, r25	; 0x05
 3c8:	8f ef       	ldi	r24, 0xFF	; 255
 3ca:	8e 83       	std	Y+6, r24	; 0x06
 3cc:	8e ee       	ldi	r24, 0xEE	; 238
 3ce:	8f 83       	std	Y+7, r24	; 0x07
 3d0:	8f ee       	ldi	r24, 0xEF	; 239
 3d2:	88 87       	std	Y+8, r24	; 0x08
	sendCommand(startSound);
 3d4:	cf 01       	movw	r24, r30
 3d6:	bb df       	rcall	.-138    	; 0x34e <sendCommand>
}
 3d8:	29 96       	adiw	r28, 0x09	; 9
 3da:	0f b6       	in	r0, 0x3f	; 63
 3dc:	f8 94       	cli
 3de:	de bf       	out	0x3e, r29	; 62
 3e0:	0f be       	out	0x3f, r0	; 63
 3e2:	cd bf       	out	0x3d, r28	; 61
 3e4:	df 91       	pop	r29
 3e6:	cf 91       	pop	r28
 3e8:	08 95       	ret

000003ea <reflexSound>:


void reflexSound()
{
 3ea:	cf 93       	push	r28
 3ec:	df 93       	push	r29
 3ee:	cd b7       	in	r28, 0x3d	; 61
 3f0:	de b7       	in	r29, 0x3e	; 62
 3f2:	29 97       	sbiw	r28, 0x09	; 9
 3f4:	0f b6       	in	r0, 0x3f	; 63
 3f6:	f8 94       	cli
 3f8:	de bf       	out	0x3e, r29	; 62
 3fa:	0f be       	out	0x3f, r0	; 63
 3fc:	cd bf       	out	0x3d, r28	; 61
	unsigned char reflexSound[ARRAYSIZE+1] = {0x7E,0x0F,0x00,0x01,0x02,0xFF,0xEE,0xEF};		//Reflexlyden ligger i mappe 01, er fil 002. "7E 0F 00 01 02 FF EF EF".
 3fe:	ce 01       	movw	r24, r28
 400:	01 96       	adiw	r24, 0x01	; 1
 402:	29 e0       	ldi	r18, 0x09	; 9
 404:	fc 01       	movw	r30, r24
 406:	11 92       	st	Z+, r1
 408:	2a 95       	dec	r18
 40a:	e9 f7       	brne	.-6      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 40c:	2e e7       	ldi	r18, 0x7E	; 126
 40e:	29 83       	std	Y+1, r18	; 0x01
 410:	2f e0       	ldi	r18, 0x0F	; 15
 412:	2a 83       	std	Y+2, r18	; 0x02
 414:	21 e0       	ldi	r18, 0x01	; 1
 416:	2c 83       	std	Y+4, r18	; 0x04
 418:	22 e0       	ldi	r18, 0x02	; 2
 41a:	2d 83       	std	Y+5, r18	; 0x05
 41c:	2f ef       	ldi	r18, 0xFF	; 255
 41e:	2e 83       	std	Y+6, r18	; 0x06
 420:	2e ee       	ldi	r18, 0xEE	; 238
 422:	2f 83       	std	Y+7, r18	; 0x07
 424:	2f ee       	ldi	r18, 0xEF	; 239
 426:	28 87       	std	Y+8, r18	; 0x08
	sendCommand(reflexSound);
 428:	92 df       	rcall	.-220    	; 0x34e <sendCommand>
}
 42a:	29 96       	adiw	r28, 0x09	; 9
 42c:	0f b6       	in	r0, 0x3f	; 63
 42e:	f8 94       	cli
 430:	de bf       	out	0x3e, r29	; 62
 432:	0f be       	out	0x3f, r0	; 63
 434:	cd bf       	out	0x3d, r28	; 61
 436:	df 91       	pop	r29
 438:	cf 91       	pop	r28
 43a:	08 95       	ret

0000043c <finishSound>:


void finishSound()
{
 43c:	cf 93       	push	r28
 43e:	df 93       	push	r29
 440:	cd b7       	in	r28, 0x3d	; 61
 442:	de b7       	in	r29, 0x3e	; 62
 444:	29 97       	sbiw	r28, 0x09	; 9
 446:	0f b6       	in	r0, 0x3f	; 63
 448:	f8 94       	cli
 44a:	de bf       	out	0x3e, r29	; 62
 44c:	0f be       	out	0x3f, r0	; 63
 44e:	cd bf       	out	0x3d, r28	; 61
	unsigned char finishSound[ARRAYSIZE+1] = {0x7E,0x0F,0x00,0x01,0x03,0xFF,0xED,0xEF};		//Fï¿½rdiglyden ligger i mappe 01, er fil 003. "7E 0F 00 01 03 FF EF EF".
 450:	ce 01       	movw	r24, r28
 452:	01 96       	adiw	r24, 0x01	; 1
 454:	29 e0       	ldi	r18, 0x09	; 9
 456:	fc 01       	movw	r30, r24
 458:	11 92       	st	Z+, r1
 45a:	2a 95       	dec	r18
 45c:	e9 f7       	brne	.-6      	; 0x458 <finishSound+0x1c>
 45e:	2e e7       	ldi	r18, 0x7E	; 126
 460:	29 83       	std	Y+1, r18	; 0x01
 462:	2f e0       	ldi	r18, 0x0F	; 15
 464:	2a 83       	std	Y+2, r18	; 0x02
 466:	21 e0       	ldi	r18, 0x01	; 1
 468:	2c 83       	std	Y+4, r18	; 0x04
 46a:	23 e0       	ldi	r18, 0x03	; 3
 46c:	2d 83       	std	Y+5, r18	; 0x05
 46e:	2f ef       	ldi	r18, 0xFF	; 255
 470:	2e 83       	std	Y+6, r18	; 0x06
 472:	2d ee       	ldi	r18, 0xED	; 237
 474:	2f 83       	std	Y+7, r18	; 0x07
 476:	2f ee       	ldi	r18, 0xEF	; 239
 478:	28 87       	std	Y+8, r18	; 0x08
	sendCommand(finishSound);
 47a:	69 df       	rcall	.-302    	; 0x34e <sendCommand>
 47c:	29 96       	adiw	r28, 0x09	; 9
 47e:	0f b6       	in	r0, 0x3f	; 63
 480:	f8 94       	cli
 482:	de bf       	out	0x3e, r29	; 62
 484:	0f be       	out	0x3f, r0	; 63
 486:	cd bf       	out	0x3d, r28	; 61
 488:	df 91       	pop	r29
 48a:	cf 91       	pop	r28
 48c:	08 95       	ret

0000048e <_exit>:
 48e:	f8 94       	cli

00000490 <__stop_program>:
 490:	ff cf       	rjmp	.-2      	; 0x490 <__stop_program>


Samlet_projekt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800200  00000586  0000061a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000586  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  0080020c  0080020c  00000626  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  00000626  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000688  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000130  00000000  00000000  000006c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000016b6  00000000  00000000  000007f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fc1  00000000  00000000  00001eae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a28  00000000  00000000  00002e6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000025c  00000000  00000000  00003898  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000724  00000000  00000000  00003af4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000779  00000000  00000000  00004218  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  00004991  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	78 c1       	rjmp	.+752    	; 0x2f6 <__vector_1>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	6e c1       	rjmp	.+732    	; 0x386 <__vector_42>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e6 e8       	ldi	r30, 0x86	; 134
  fc:	f5 e0       	ldi	r31, 0x05	; 5
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	ac 30       	cpi	r26, 0x0C	; 12
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	ac e0       	ldi	r26, 0x0C	; 12
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a0 31       	cpi	r26, 0x10	; 16
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	dd d0       	rcall	.+442    	; 0x2da <main>
 120:	30 c2       	rjmp	.+1120   	; 0x582 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <startCar>:
}



void startCar(void) 
{
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
		while ((PINA & 1) != 0)		//Bliv her indtil indtil knap 0 trykkes
 128:	02 c0       	rjmp	.+4      	; 0x12e <startCar+0xa>
		{
			UDR2 = 0;				//Sender LOW til SOMO-II. Forhindrer støj/kliklyde. Måske findes et andet fix?
 12a:	10 92 d6 00 	sts	0x00D6, r1	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>



void startCar(void) 
{
		while ((PINA & 1) != 0)		//Bliv her indtil indtil knap 0 trykkes
 12e:	00 99       	sbic	0x00, 0	; 0
 130:	fc cf       	rjmp	.-8      	; 0x12a <startCar+0x6>
 132:	c2 e3       	ldi	r28, 0x32	; 50
 134:	d0 e0       	ldi	r29, 0x00	; 0
 136:	09 c0       	rjmp	.+18     	; 0x14a <startCar+0x26>
		{
			UDR2 = 0;				//Sender LOW til SOMO-II. Forhindrer støj/kliklyde. Måske findes et andet fix?
		}
		//_delay_ms(500);
		for (int i = 50; i <= 100; i++){
			engineControl(i);
 138:	ce 01       	movw	r24, r28
 13a:	46 d1       	rcall	.+652    	; 0x3c8 <engineControl>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13c:	8f eb       	ldi	r24, 0xBF	; 191
 13e:	9d e5       	ldi	r25, 0x5D	; 93
 140:	01 97       	sbiw	r24, 0x01	; 1
 142:	f1 f7       	brne	.-4      	; 0x140 <startCar+0x1c>
 144:	00 c0       	rjmp	.+0      	; 0x146 <startCar+0x22>
 146:	00 00       	nop
		while ((PINA & 1) != 0)		//Bliv her indtil indtil knap 0 trykkes
		{
			UDR2 = 0;				//Sender LOW til SOMO-II. Forhindrer støj/kliklyde. Måske findes et andet fix?
		}
		//_delay_ms(500);
		for (int i = 50; i <= 100; i++){
 148:	21 96       	adiw	r28, 0x01	; 1
 14a:	c5 36       	cpi	r28, 0x65	; 101
 14c:	d1 05       	cpc	r29, r1
			engineControl(i);
			_delay_us(ACC_DELAY + 1000);
		}
		//engineControl(FORWARD_SPEED);			//Start motor. Max speed
		//K?RELYS
		startLyd();
 14e:	a4 f3       	brlt	.-24     	; 0x138 <startCar+0x14>
 150:	9c d1       	rcall	.+824    	; 0x48a <startLyd>
}
 152:	df 91       	pop	r29
 154:	cf 91       	pop	r28
 156:	08 95       	ret

00000158 <reflexReactions>:

void reflexReactions(int nReflex)		//Hvordan bilen skal reagere på reflekser
{
 158:	cf 93       	push	r28
 15a:	df 93       	push	r29
	if(nReflex == 6)
 15c:	86 30       	cpi	r24, 0x06	; 6
 15e:	91 05       	cpc	r25, r1
 160:	81 f5       	brne	.+96     	; 0x1c2 <reflexReactions+0x6a>
 162:	0a c0       	rjmp	.+20     	; 0x178 <reflexReactions+0x20>
	{
		//engineControl(BACKWARD_SPEED); //Bak
			for (int i = 100; i >= 50; i--){
				engineControl(i);
 164:	ce 01       	movw	r24, r28
 166:	30 d1       	rcall	.+608    	; 0x3c8 <engineControl>
 168:	8f e1       	ldi	r24, 0x1F	; 31
 16a:	9e e4       	ldi	r25, 0x4E	; 78
 16c:	01 97       	sbiw	r24, 0x01	; 1
 16e:	f1 f7       	brne	.-4      	; 0x16c <reflexReactions+0x14>
 170:	00 c0       	rjmp	.+0      	; 0x172 <reflexReactions+0x1a>
 172:	00 00       	nop
void reflexReactions(int nReflex)		//Hvordan bilen skal reagere på reflekser
{
	if(nReflex == 6)
	{
		//engineControl(BACKWARD_SPEED); //Bak
			for (int i = 100; i >= 50; i--){
 174:	21 97       	sbiw	r28, 0x01	; 1
 176:	02 c0       	rjmp	.+4      	; 0x17c <reflexReactions+0x24>
 178:	c4 e6       	ldi	r28, 0x64	; 100
 17a:	d0 e0       	ldi	r29, 0x00	; 0
 17c:	c2 33       	cpi	r28, 0x32	; 50
 17e:	d1 05       	cpc	r29, r1
 180:	8c f7       	brge	.-30     	; 0x164 <reflexReactions+0xc>
				engineControl(i);
				_delay_us(ACC_DELAY);
			}
			engineControl(0);
 182:	80 e0       	ldi	r24, 0x00	; 0
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	20 d1       	rcall	.+576    	; 0x3c8 <engineControl>
 188:	9f e7       	ldi	r25, 0x7F	; 127
 18a:	28 e3       	ldi	r18, 0x38	; 56
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	91 50       	subi	r25, 0x01	; 1
 190:	20 40       	sbci	r18, 0x00	; 0
 192:	80 40       	sbci	r24, 0x00	; 0
 194:	e1 f7       	brne	.-8      	; 0x18e <reflexReactions+0x36>
 196:	00 c0       	rjmp	.+0      	; 0x198 <reflexReactions+0x40>
 198:	00 00       	nop
			_delay_us(ACC_DELAY*5);
			for (int i = 50; i <= 100; i++){
 19a:	c2 e3       	ldi	r28, 0x32	; 50
 19c:	d0 e0       	ldi	r29, 0x00	; 0
 19e:	0c c0       	rjmp	.+24     	; 0x1b8 <reflexReactions+0x60>
				engineControl(-i);
 1a0:	88 27       	eor	r24, r24
 1a2:	99 27       	eor	r25, r25
 1a4:	8c 1b       	sub	r24, r28
 1a6:	9d 0b       	sbc	r25, r29
 1a8:	0f d1       	rcall	.+542    	; 0x3c8 <engineControl>
 1aa:	8f e1       	ldi	r24, 0x1F	; 31
 1ac:	9e e4       	ldi	r25, 0x4E	; 78
 1ae:	01 97       	sbiw	r24, 0x01	; 1
 1b0:	f1 f7       	brne	.-4      	; 0x1ae <reflexReactions+0x56>
 1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <reflexReactions+0x5c>
 1b4:	00 00       	nop
				engineControl(i);
				_delay_us(ACC_DELAY);
			}
			engineControl(0);
			_delay_us(ACC_DELAY*5);
			for (int i = 50; i <= 100; i++){
 1b6:	21 96       	adiw	r28, 0x01	; 1
 1b8:	c5 36       	cpi	r28, 0x65	; 101
 1ba:	d1 05       	cpc	r29, r1
				engineControl(-i);
				_delay_us(ACC_DELAY);
			}
		//BAKLYS
		refleksLyd();
 1bc:	8c f3       	brlt	.-30     	; 0x1a0 <reflexReactions+0x48>
 1be:	8f d1       	rcall	.+798    	; 0x4de <refleksLyd>
 1c0:	4f c0       	rjmp	.+158    	; 0x260 <reflexReactions+0x108>
	}
	else if(nReflex == 8)
 1c2:	88 30       	cpi	r24, 0x08	; 8
 1c4:	91 05       	cpc	r25, r1
 1c6:	81 f5       	brne	.+96     	; 0x228 <reflexReactions+0xd0>
 1c8:	0d c0       	rjmp	.+26     	; 0x1e4 <reflexReactions+0x8c>
	{
		//engineControl(FORWARD_SPEED); //Frem
		for (int i = 100; i >= 50; i--){
			engineControl(-i);
 1ca:	88 27       	eor	r24, r24
 1cc:	99 27       	eor	r25, r25
 1ce:	8c 1b       	sub	r24, r28
 1d0:	9d 0b       	sbc	r25, r29
 1d2:	fa d0       	rcall	.+500    	; 0x3c8 <engineControl>
 1d4:	8f e1       	ldi	r24, 0x1F	; 31
 1d6:	9e e4       	ldi	r25, 0x4E	; 78
 1d8:	01 97       	sbiw	r24, 0x01	; 1
 1da:	f1 f7       	brne	.-4      	; 0x1d8 <reflexReactions+0x80>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <reflexReactions+0x86>
 1de:	00 00       	nop
		refleksLyd();
	}
	else if(nReflex == 8)
	{
		//engineControl(FORWARD_SPEED); //Frem
		for (int i = 100; i >= 50; i--){
 1e0:	21 97       	sbiw	r28, 0x01	; 1
 1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <reflexReactions+0x90>
 1e4:	c4 e6       	ldi	r28, 0x64	; 100
 1e6:	d0 e0       	ldi	r29, 0x00	; 0
 1e8:	c2 33       	cpi	r28, 0x32	; 50
 1ea:	d1 05       	cpc	r29, r1
			engineControl(-i);
			_delay_us(ACC_DELAY);
		}
		engineControl(0);
 1ec:	74 f7       	brge	.-36     	; 0x1ca <reflexReactions+0x72>
 1ee:	80 e0       	ldi	r24, 0x00	; 0
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	ea d0       	rcall	.+468    	; 0x3c8 <engineControl>
 1f4:	9f e7       	ldi	r25, 0x7F	; 127
 1f6:	28 e3       	ldi	r18, 0x38	; 56
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	91 50       	subi	r25, 0x01	; 1
 1fc:	20 40       	sbci	r18, 0x00	; 0
 1fe:	80 40       	sbci	r24, 0x00	; 0
 200:	e1 f7       	brne	.-8      	; 0x1fa <reflexReactions+0xa2>
 202:	00 c0       	rjmp	.+0      	; 0x204 <reflexReactions+0xac>
		_delay_us(ACC_DELAY*5);
		for (int i = 50; i <= 100; i++){
 204:	00 00       	nop
 206:	c2 e3       	ldi	r28, 0x32	; 50
 208:	d0 e0       	ldi	r29, 0x00	; 0
			engineControl(i);
 20a:	09 c0       	rjmp	.+18     	; 0x21e <reflexReactions+0xc6>
 20c:	ce 01       	movw	r24, r28
 20e:	dc d0       	rcall	.+440    	; 0x3c8 <engineControl>
 210:	8f e1       	ldi	r24, 0x1F	; 31
 212:	9e e4       	ldi	r25, 0x4E	; 78
 214:	01 97       	sbiw	r24, 0x01	; 1
 216:	f1 f7       	brne	.-4      	; 0x214 <reflexReactions+0xbc>
 218:	00 c0       	rjmp	.+0      	; 0x21a <reflexReactions+0xc2>
			engineControl(-i);
			_delay_us(ACC_DELAY);
		}
		engineControl(0);
		_delay_us(ACC_DELAY*5);
		for (int i = 50; i <= 100; i++){
 21a:	00 00       	nop
 21c:	21 96       	adiw	r28, 0x01	; 1
 21e:	c5 36       	cpi	r28, 0x65	; 101
 220:	d1 05       	cpc	r29, r1
			engineControl(i);
			_delay_us(ACC_DELAY);
		}
		//K?RELYS
		refleksLyd();
 222:	a4 f3       	brlt	.-24     	; 0x20c <reflexReactions+0xb4>
 224:	5c d1       	rcall	.+696    	; 0x4de <refleksLyd>
	}
	else if(nReflex == 11)
 226:	1c c0       	rjmp	.+56     	; 0x260 <reflexReactions+0x108>
 228:	8b 30       	cpi	r24, 0x0B	; 11
 22a:	91 05       	cpc	r25, r1
 22c:	a9 f4       	brne	.+42     	; 0x258 <reflexReactions+0x100>
	{
		for (int i = 100; i >= 50; i--){
			engineControl(i);
 22e:	0a c0       	rjmp	.+20     	; 0x244 <reflexReactions+0xec>
 230:	ce 01       	movw	r24, r28
 232:	ca d0       	rcall	.+404    	; 0x3c8 <engineControl>
 234:	8f e1       	ldi	r24, 0x1F	; 31
 236:	9e e4       	ldi	r25, 0x4E	; 78
 238:	01 97       	sbiw	r24, 0x01	; 1
 23a:	f1 f7       	brne	.-4      	; 0x238 <reflexReactions+0xe0>
 23c:	00 c0       	rjmp	.+0      	; 0x23e <reflexReactions+0xe6>
 23e:	00 00       	nop
		//K?RELYS
		refleksLyd();
	}
	else if(nReflex == 11)
	{
		for (int i = 100; i >= 50; i--){
 240:	21 97       	sbiw	r28, 0x01	; 1
 242:	02 c0       	rjmp	.+4      	; 0x248 <reflexReactions+0xf0>
 244:	c4 e6       	ldi	r28, 0x64	; 100
 246:	d0 e0       	ldi	r29, 0x00	; 0
			engineControl(i);
			_delay_us(ACC_DELAY);
		}
		engineControl(0);
 248:	c2 33       	cpi	r28, 0x32	; 50
 24a:	d1 05       	cpc	r29, r1
 24c:	8c f7       	brge	.-30     	; 0x230 <reflexReactions+0xd8>
 24e:	80 e0       	ldi	r24, 0x00	; 0
		
		//engineControl(0); //Stop
		//SLUK LYS
		slutLyd();
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	ba d0       	rcall	.+372    	; 0x3c8 <engineControl>
 254:	6d d1       	rcall	.+730    	; 0x530 <slutLyd>
	}
	else if(nReflex > 0)
 256:	04 c0       	rjmp	.+8      	; 0x260 <reflexReactions+0x108>
 258:	18 16       	cp	r1, r24
 25a:	19 06       	cpc	r1, r25
	{
		refleksLyd();
 25c:	0c f4       	brge	.+2      	; 0x260 <reflexReactions+0x108>
 25e:	3f d1       	rcall	.+638    	; 0x4de <refleksLyd>
	}
}
 260:	df 91       	pop	r29
 262:	cf 91       	pop	r28
 264:	08 95       	ret

00000266 <n50msTimer>:


void n50msTimer(void)	//Initialiser 50msTimer
{
	OCR4A = 49999;			//Passende compare value for et compare match hvert 50. ms, med prescaler på 8
 266:	8f e4       	ldi	r24, 0x4F	; 79
 268:	93 ec       	ldi	r25, 0xC3	; 195
 26a:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7c00a9>
 26e:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7c00a8>
	TCCR4A = 0b00000000;	//bit 7-2: compare output mode for channel A-B-C. Her er alle disconnected. Bit 0-1 er bit 0 og 1 af waveform generation mode.
 272:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
	TCCR4B = 0b00001010;	//Bit 3-4 er bit 2 og 3 af waveform generation mode. Bit 0-2 sætter prescaler.
 276:	8a e0       	ldi	r24, 0x0A	; 10
 278:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7c00a1>
	TIMSK4 = 0b00000010;	//Bit 1-3: Compare match interrupt enable.
 27c:	82 e0       	ldi	r24, 0x02	; 2
 27e:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x7c0072>
 282:	08 95       	ret

00000284 <initCar>:



void initCar(void)
{
		sei();
 284:	78 94       	sei
		//-------------------------------------------- Initialisering --------------------------------------------
		
		//---------------Lyd-----------
		initUART();
 286:	f1 d0       	rcall	.+482    	; 0x46a <initUART>
		
		//--------------Motor----------
		initEngine();
 288:	95 d0       	rcall	.+298    	; 0x3b4 <initEngine>
		
		//---------------Lys-----------
		
		
		//--------------Refleks-----------
		initRefleks();
 28a:	d5 d0       	rcall	.+426    	; 0x436 <initRefleks>
		
		//-------------50msTimer----------
		n50msTimer();
 28c:	ec df       	rcall	.-40     	; 0x266 <n50msTimer>
 28e:	02 d0       	rcall	.+4      	; 0x294 <initLEDport>
		
		// ---------MEGA2560 LEDs---------
		initLEDport();
 290:	11 b8       	out	0x01, r1	; 1
 292:	08 95       	ret

00000294 <initLEDport>:
		
		//--------PORTA as input--------
		DDRA = 0;
 294:	8f ef       	ldi	r24, 0xFF	; 255
 296:	84 b9       	out	0x04, r24	; 4
}

void writeAllLEDs(unsigned char pattern)
{
	// Hent parameteren og skriv til lysdioderne
	PORTB = pattern;
 298:	15 b8       	out	0x05, r1	; 5
 29a:	08 95       	ret

0000029c <turnOnLED>:
void turnOnLED(unsigned char led_nr)
{
	// Lokal variabel
	unsigned char mask;
	// Vi skal kun lave noget, hvis led_nr < 8
	if (led_nr <= MAX_LED_NR)
 29c:	88 30       	cpi	r24, 0x08	; 8
 29e:	60 f4       	brcc	.+24     	; 0x2b8 <turnOnLED+0x1c>
	{
		// Dan maske på basis af parameteren (led_nr)
		mask = 0b00000001 << led_nr;
 2a0:	21 e0       	ldi	r18, 0x01	; 1
 2a2:	30 e0       	ldi	r19, 0x00	; 0
 2a4:	a9 01       	movw	r20, r18
 2a6:	02 c0       	rjmp	.+4      	; 0x2ac <turnOnLED+0x10>
 2a8:	44 0f       	add	r20, r20
 2aa:	55 1f       	adc	r21, r21
 2ac:	8a 95       	dec	r24
 2ae:	e2 f7       	brpl	.-8      	; 0x2a8 <turnOnLED+0xc>
 2b0:	ca 01       	movw	r24, r20
		// Tænd den aktuelle lysdiode (de andre ændres ikke)
		PORTB = PINB | mask;
 2b2:	93 b1       	in	r25, 0x03	; 3
 2b4:	89 2b       	or	r24, r25
 2b6:	85 b9       	out	0x05, r24	; 5
 2b8:	08 95       	ret

000002ba <turnOffLED>:
void turnOffLED(unsigned char led_nr)
{
	// Lokal variabel
	unsigned char mask;
	// Vi skal kun lave noget, hvis led_nr < 8
	if (led_nr <= MAX_LED_NR)
 2ba:	88 30       	cpi	r24, 0x08	; 8
 2bc:	68 f4       	brcc	.+26     	; 0x2d8 <turnOffLED+0x1e>
	{
		// Dan (inverteret) maske på basis af parameteren (led_nr)
		mask = ~(0b00000001 << led_nr);
 2be:	21 e0       	ldi	r18, 0x01	; 1
 2c0:	30 e0       	ldi	r19, 0x00	; 0
 2c2:	a9 01       	movw	r20, r18
 2c4:	02 c0       	rjmp	.+4      	; 0x2ca <turnOffLED+0x10>
 2c6:	44 0f       	add	r20, r20
 2c8:	55 1f       	adc	r21, r21
 2ca:	8a 95       	dec	r24
 2cc:	e2 f7       	brpl	.-8      	; 0x2c6 <turnOffLED+0xc>
 2ce:	ca 01       	movw	r24, r20
 2d0:	80 95       	com	r24
		// Sluk den aktuelle lysdiode (de andre ændres ikke)
		PORTB = PINB & mask;
 2d2:	93 b1       	in	r25, 0x03	; 3
 2d4:	89 23       	and	r24, r25
 2d6:	85 b9       	out	0x05, r24	; 5
 2d8:	08 95       	ret

000002da <main>:

#define REFLEX_DELAY 6 // Ganges med 50. Antal millisekunder, hvor ny refleks ikke man måles.
int main(void)
{
	// ------------------------ Initialize ---------------------------
	initCar();
 2da:	d4 df       	rcall	.-88     	; 0x284 <initCar>
	// ------------------------ Start bil -----------------------------
	startCar();
 2dc:	23 df       	rcall	.-442    	; 0x124 <startCar>
 2de:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <reflexCount>
	// -------------------------------------- Main program loop ---------------------------------------------
	while(1)
	{
		
		if(reflexCount % 2 == 0)	//Til test af reflexCount. Hvis lige antal lyser Led 7
 2e2:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <reflexCount+0x1>
 2e6:	80 fd       	sbrc	r24, 0
 2e8:	03 c0       	rjmp	.+6      	; 0x2f0 <main+0x16>
			turnOnLED(7);
 2ea:	87 e0       	ldi	r24, 0x07	; 7
 2ec:	d7 df       	rcall	.-82     	; 0x29c <turnOnLED>
 2ee:	f7 cf       	rjmp	.-18     	; 0x2de <main+0x4>
		else
			turnOffLED(7);
 2f0:	87 e0       	ldi	r24, 0x07	; 7
 2f2:	e3 df       	rcall	.-58     	; 0x2ba <turnOffLED>
 2f4:	f4 cf       	rjmp	.-24     	; 0x2de <main+0x4>

000002f6 <__vector_1>:
 2f6:	1f 92       	push	r1
	}
}

ISR(INT0_vect)	//REFLEX1 interrupt rutine. Kommandoer kun hvis tid siden sidste refleks > 500ms 
{
 2f8:	0f 92       	push	r0
 2fa:	0f b6       	in	r0, 0x3f	; 63
 2fc:	0f 92       	push	r0
 2fe:	11 24       	eor	r1, r1
 300:	0b b6       	in	r0, 0x3b	; 59
 302:	0f 92       	push	r0
 304:	2f 93       	push	r18
 306:	3f 93       	push	r19
 308:	4f 93       	push	r20
 30a:	5f 93       	push	r21
 30c:	6f 93       	push	r22
 30e:	7f 93       	push	r23
 310:	8f 93       	push	r24
 312:	9f 93       	push	r25
 314:	af 93       	push	r26
 316:	bf 93       	push	r27
 318:	ef 93       	push	r30
 31a:	ff 93       	push	r31
	if(n50ms - lastReflex > REFLEX_DELAY)
 31c:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <__data_end>
 320:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <__data_end+0x1>
 324:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 328:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 32c:	82 1b       	sub	r24, r18
 32e:	93 0b       	sbc	r25, r19
 330:	07 97       	sbiw	r24, 0x07	; 7
 332:	b4 f0       	brlt	.+44     	; 0x360 <__vector_1+0x6a>
	{
		lastReflex = n50ms; //Gem tiden
 334:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <__data_end>
 338:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <__data_end+0x1>
 33c:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 340:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
		reflexCount++;		//Increment counter
 344:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <reflexCount>
 348:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <reflexCount+0x1>
 34c:	01 96       	adiw	r24, 0x01	; 1
 34e:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <reflexCount+0x1>
 352:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <reflexCount>
		reflexReactions(reflexCount);	//Få bilen til at reagere
 356:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <reflexCount>
 35a:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <reflexCount+0x1>
 35e:	fc de       	rcall	.-520    	; 0x158 <reflexReactions>
	}
}
 360:	ff 91       	pop	r31
 362:	ef 91       	pop	r30
 364:	bf 91       	pop	r27
 366:	af 91       	pop	r26
 368:	9f 91       	pop	r25
 36a:	8f 91       	pop	r24
 36c:	7f 91       	pop	r23
 36e:	6f 91       	pop	r22
 370:	5f 91       	pop	r21
 372:	4f 91       	pop	r20
 374:	3f 91       	pop	r19
 376:	2f 91       	pop	r18
 378:	0f 90       	pop	r0
 37a:	0b be       	out	0x3b, r0	; 59
 37c:	0f 90       	pop	r0
 37e:	0f be       	out	0x3f, r0	; 63
 380:	0f 90       	pop	r0
 382:	1f 90       	pop	r1
 384:	18 95       	reti

00000386 <__vector_42>:

ISR(TIMER4_COMPA_vect)			//50msTimer tæller op ved compare match
{
 386:	1f 92       	push	r1
 388:	0f 92       	push	r0
 38a:	0f b6       	in	r0, 0x3f	; 63
 38c:	0f 92       	push	r0
 38e:	11 24       	eor	r1, r1
 390:	8f 93       	push	r24
 392:	9f 93       	push	r25
	n50ms++;
 394:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <__data_end>
 398:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <__data_end+0x1>
 39c:	01 96       	adiw	r24, 0x01	; 1
 39e:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <__data_end+0x1>
 3a2:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <__data_end>
 3a6:	9f 91       	pop	r25
 3a8:	8f 91       	pop	r24
 3aa:	0f 90       	pop	r0
 3ac:	0f be       	out	0x3f, r0	; 63
 3ae:	0f 90       	pop	r0
 3b0:	1f 90       	pop	r1
 3b2:	18 95       	reti

000003b4 <initEngine>:
 */ 

#include <avr/io.h>

void initEngine(void){
	DDRB = 0xFF; //port B as output
 3b4:	8f ef       	ldi	r24, 0xFF	; 255
 3b6:	84 b9       	out	0x04, r24	; 4
	PORTB = 0; //clear
 3b8:	15 b8       	out	0x05, r1	; 5
	TCCR1A = 0b10100011; //PIN A og PIN B
 3ba:	83 ea       	ldi	r24, 0xA3	; 163
 3bc:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
	TCCR1B = 0b00000010; // 1kHz
 3c0:	82 e0       	ldi	r24, 0x02	; 2
 3c2:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7c0081>
 3c6:	08 95       	ret

000003c8 <engineControl>:
}


void engineControl(int Speed){
	
	if(Speed > 0){
 3c8:	18 16       	cp	r1, r24
 3ca:	19 06       	cpc	r1, r25
 3cc:	ac f4       	brge	.+42     	; 0x3f8 <engineControl+0x30>
		OCR1B = 0;
 3ce:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7c008b>
 3d2:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7c008a>
		OCR1A = (Speed * 10) + 23;
 3d6:	9c 01       	movw	r18, r24
 3d8:	22 0f       	add	r18, r18
 3da:	33 1f       	adc	r19, r19
 3dc:	88 0f       	add	r24, r24
 3de:	99 1f       	adc	r25, r25
 3e0:	88 0f       	add	r24, r24
 3e2:	99 1f       	adc	r25, r25
 3e4:	88 0f       	add	r24, r24
 3e6:	99 1f       	adc	r25, r25
 3e8:	82 0f       	add	r24, r18
 3ea:	93 1f       	adc	r25, r19
 3ec:	47 96       	adiw	r24, 0x17	; 23
 3ee:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 3f2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
 3f6:	08 95       	ret
	} else if (Speed < 0){
 3f8:	99 23       	and	r25, r25
 3fa:	94 f4       	brge	.+36     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
		OCR1A = 0;
 3fc:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 400:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
		OCR1B = (Speed * -10) + 23;
 404:	46 ef       	ldi	r20, 0xF6	; 246
 406:	bc 01       	movw	r22, r24
 408:	46 03       	mulsu	r20, r22
 40a:	90 01       	movw	r18, r0
 40c:	47 9f       	mul	r20, r23
 40e:	30 0d       	add	r19, r0
 410:	11 24       	eor	r1, r1
 412:	c9 01       	movw	r24, r18
 414:	47 96       	adiw	r24, 0x17	; 23
 416:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7c008b>
 41a:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7c008a>
 41e:	08 95       	ret
	} else if (Speed == 0){
 420:	89 2b       	or	r24, r25
 422:	41 f4       	brne	.+16     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
		OCR1A = 0;
 424:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 428:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
		OCR1B = 0;
 42c:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7c008b>
 430:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7c008a>
 434:	08 95       	ret

00000436 <initRefleks>:
 436:	83 e0       	ldi	r24, 0x03	; 3
 438:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
 43c:	81 e0       	ldi	r24, 0x01	; 1
 43e:	8d bb       	out	0x1d, r24	; 29
 440:	08 95       	ret

00000442 <sendCommand>:
	sendCommand(volMax);
}


void sendCommand(unsigned char command[])
{
 442:	ac 01       	movw	r20, r24
	for(int i = 0; i<ARRAYSIZE; i++)
 444:	20 e0       	ldi	r18, 0x00	; 0
 446:	30 e0       	ldi	r19, 0x00	; 0
 448:	0c c0       	rjmp	.+24     	; 0x462 <sendCommand+0x20>
	{
		while((UCSR2A & 0b00100000)==0)	 //Vent pï¿½ register er klar til at modtage byte
 44a:	90 91 d0 00 	lds	r25, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7c00d0>
 44e:	95 ff       	sbrs	r25, 5
 450:	fc cf       	rjmp	.-8      	; 0x44a <sendCommand+0x8>
		{}
		UDR2 = command[i];
 452:	fa 01       	movw	r30, r20
 454:	e2 0f       	add	r30, r18
 456:	f3 1f       	adc	r31, r19
 458:	90 81       	ld	r25, Z
 45a:	90 93 d6 00 	sts	0x00D6, r25	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
}


void sendCommand(unsigned char command[])
{
	for(int i = 0; i<ARRAYSIZE; i++)
 45e:	2f 5f       	subi	r18, 0xFF	; 255
 460:	3f 4f       	sbci	r19, 0xFF	; 255
 462:	28 30       	cpi	r18, 0x08	; 8
 464:	31 05       	cpc	r19, r1
 466:	8c f3       	brlt	.-30     	; 0x44a <sendCommand+0x8>
		{}
		UDR2 = command[i];
	}
	
	
}
 468:	08 95       	ret

0000046a <initUART>:
unsigned char volMax[ARRAYSIZE+1] = {0x7E,0x06,0x00,0x00,0x1E,0xFF,0xDC,0xEF};		//Volume max. "7E 06 00 00 1E FF DC EF"


void initUART()
{
	UBRR2 = F_CPU/(16*(long int)9600) - 1; // Sï¿½t baud rate af output
 46a:	87 e6       	ldi	r24, 0x67	; 103
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	90 93 d5 00 	sts	0x00D5, r25	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7c00d5>
 472:	80 93 d4 00 	sts	0x00D4, r24	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7c00d4>
	UCSR2B = 0b00011000;
 476:	88 e1       	ldi	r24, 0x18	; 24
 478:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7c00d1>
	UCSR2C = 0b00000110;
 47c:	86 e0       	ldi	r24, 0x06	; 6
 47e:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7c00d2>

	sendCommand(volMax);
 482:	82 e0       	ldi	r24, 0x02	; 2
 484:	92 e0       	ldi	r25, 0x02	; 2
 486:	dd cf       	rjmp	.-70     	; 0x442 <sendCommand>
 488:	08 95       	ret

0000048a <startLyd>:
	
}


void startLyd()
{
 48a:	cf 93       	push	r28
 48c:	df 93       	push	r29
 48e:	cd b7       	in	r28, 0x3d	; 61
 490:	de b7       	in	r29, 0x3e	; 62
 492:	29 97       	sbiw	r28, 0x09	; 9
 494:	0f b6       	in	r0, 0x3f	; 63
 496:	f8 94       	cli
 498:	de bf       	out	0x3e, r29	; 62
 49a:	0f be       	out	0x3f, r0	; 63
 49c:	cd bf       	out	0x3d, r28	; 61
	unsigned char startSound[ARRAYSIZE+1] = {0x7E,0x0F,0x01,0x01,0x01,0xFF,0xEE,0xEF};		//Startlyden ligger i mappe 01, er fil 001. "7E 0F 00 01 01 FF EF EF".
 49e:	fe 01       	movw	r30, r28
 4a0:	31 96       	adiw	r30, 0x01	; 1
 4a2:	89 e0       	ldi	r24, 0x09	; 9
 4a4:	df 01       	movw	r26, r30
 4a6:	1d 92       	st	X+, r1
 4a8:	8a 95       	dec	r24
 4aa:	e9 f7       	brne	.-6      	; 0x4a6 <startLyd+0x1c>
 4ac:	8e e7       	ldi	r24, 0x7E	; 126
 4ae:	89 83       	std	Y+1, r24	; 0x01
 4b0:	8f e0       	ldi	r24, 0x0F	; 15
 4b2:	8a 83       	std	Y+2, r24	; 0x02
 4b4:	91 e0       	ldi	r25, 0x01	; 1
 4b6:	9b 83       	std	Y+3, r25	; 0x03
 4b8:	9c 83       	std	Y+4, r25	; 0x04
 4ba:	9d 83       	std	Y+5, r25	; 0x05
 4bc:	8f ef       	ldi	r24, 0xFF	; 255
 4be:	8e 83       	std	Y+6, r24	; 0x06
 4c0:	8e ee       	ldi	r24, 0xEE	; 238
 4c2:	8f 83       	std	Y+7, r24	; 0x07
 4c4:	8f ee       	ldi	r24, 0xEF	; 239
 4c6:	88 87       	std	Y+8, r24	; 0x08
	sendCommand(startSound);
 4c8:	cf 01       	movw	r24, r30
 4ca:	bb df       	rcall	.-138    	; 0x442 <sendCommand>
}
 4cc:	29 96       	adiw	r28, 0x09	; 9
 4ce:	0f b6       	in	r0, 0x3f	; 63
 4d0:	f8 94       	cli
 4d2:	de bf       	out	0x3e, r29	; 62
 4d4:	0f be       	out	0x3f, r0	; 63
 4d6:	cd bf       	out	0x3d, r28	; 61
 4d8:	df 91       	pop	r29
 4da:	cf 91       	pop	r28
 4dc:	08 95       	ret

000004de <refleksLyd>:


void refleksLyd()
{
 4de:	cf 93       	push	r28
 4e0:	df 93       	push	r29
 4e2:	cd b7       	in	r28, 0x3d	; 61
 4e4:	de b7       	in	r29, 0x3e	; 62
 4e6:	29 97       	sbiw	r28, 0x09	; 9
 4e8:	0f b6       	in	r0, 0x3f	; 63
 4ea:	f8 94       	cli
 4ec:	de bf       	out	0x3e, r29	; 62
 4ee:	0f be       	out	0x3f, r0	; 63
 4f0:	cd bf       	out	0x3d, r28	; 61
	unsigned char reflexSound[ARRAYSIZE+1] = {0x7E,0x0F,0x00,0x01,0x02,0xFF,0xEE,0xEF};		//Reflexlyden ligger i mappe 01, er fil 002. "7E 0F 00 01 02 FF EF EF".
 4f2:	ce 01       	movw	r24, r28
 4f4:	01 96       	adiw	r24, 0x01	; 1
 4f6:	29 e0       	ldi	r18, 0x09	; 9
 4f8:	fc 01       	movw	r30, r24
 4fa:	11 92       	st	Z+, r1
 4fc:	2a 95       	dec	r18
 4fe:	e9 f7       	brne	.-6      	; 0x4fa <refleksLyd+0x1c>
 500:	2e e7       	ldi	r18, 0x7E	; 126
 502:	29 83       	std	Y+1, r18	; 0x01
 504:	2f e0       	ldi	r18, 0x0F	; 15
 506:	2a 83       	std	Y+2, r18	; 0x02
 508:	21 e0       	ldi	r18, 0x01	; 1
 50a:	2c 83       	std	Y+4, r18	; 0x04
 50c:	22 e0       	ldi	r18, 0x02	; 2
 50e:	2d 83       	std	Y+5, r18	; 0x05
 510:	2f ef       	ldi	r18, 0xFF	; 255
 512:	2e 83       	std	Y+6, r18	; 0x06
 514:	2e ee       	ldi	r18, 0xEE	; 238
 516:	2f 83       	std	Y+7, r18	; 0x07
 518:	2f ee       	ldi	r18, 0xEF	; 239
 51a:	28 87       	std	Y+8, r18	; 0x08
	sendCommand(reflexSound);
 51c:	92 df       	rcall	.-220    	; 0x442 <sendCommand>
}
 51e:	29 96       	adiw	r28, 0x09	; 9
 520:	0f b6       	in	r0, 0x3f	; 63
 522:	f8 94       	cli
 524:	de bf       	out	0x3e, r29	; 62
 526:	0f be       	out	0x3f, r0	; 63
 528:	cd bf       	out	0x3d, r28	; 61
 52a:	df 91       	pop	r29
 52c:	cf 91       	pop	r28
 52e:	08 95       	ret

00000530 <slutLyd>:


void slutLyd()
{
 530:	cf 93       	push	r28
 532:	df 93       	push	r29
 534:	cd b7       	in	r28, 0x3d	; 61
 536:	de b7       	in	r29, 0x3e	; 62
 538:	29 97       	sbiw	r28, 0x09	; 9
 53a:	0f b6       	in	r0, 0x3f	; 63
 53c:	f8 94       	cli
 53e:	de bf       	out	0x3e, r29	; 62
 540:	0f be       	out	0x3f, r0	; 63
 542:	cd bf       	out	0x3d, r28	; 61
	unsigned char finishSound[ARRAYSIZE+1] = {0x7E,0x0F,0x00,0x01,0x03,0xFF,0xED,0xEF};		//Fï¿½rdiglyden ligger i mappe 01, er fil 003. "7E 0F 00 01 03 FF EF EF".
 544:	ce 01       	movw	r24, r28
 546:	01 96       	adiw	r24, 0x01	; 1
 548:	29 e0       	ldi	r18, 0x09	; 9
 54a:	fc 01       	movw	r30, r24
 54c:	11 92       	st	Z+, r1
 54e:	2a 95       	dec	r18
 550:	e9 f7       	brne	.-6      	; 0x54c <slutLyd+0x1c>
 552:	2e e7       	ldi	r18, 0x7E	; 126
 554:	29 83       	std	Y+1, r18	; 0x01
 556:	2f e0       	ldi	r18, 0x0F	; 15
 558:	2a 83       	std	Y+2, r18	; 0x02
 55a:	21 e0       	ldi	r18, 0x01	; 1
 55c:	2c 83       	std	Y+4, r18	; 0x04
 55e:	23 e0       	ldi	r18, 0x03	; 3
 560:	2d 83       	std	Y+5, r18	; 0x05
 562:	2f ef       	ldi	r18, 0xFF	; 255
 564:	2e 83       	std	Y+6, r18	; 0x06
 566:	2d ee       	ldi	r18, 0xED	; 237
 568:	2f 83       	std	Y+7, r18	; 0x07
 56a:	2f ee       	ldi	r18, 0xEF	; 239
 56c:	28 87       	std	Y+8, r18	; 0x08
	sendCommand(finishSound);
 56e:	69 df       	rcall	.-302    	; 0x442 <sendCommand>
 570:	29 96       	adiw	r28, 0x09	; 9
 572:	0f b6       	in	r0, 0x3f	; 63
 574:	f8 94       	cli
 576:	de bf       	out	0x3e, r29	; 62
 578:	0f be       	out	0x3f, r0	; 63
 57a:	cd bf       	out	0x3d, r28	; 61
 57c:	df 91       	pop	r29
 57e:	cf 91       	pop	r28
 580:	08 95       	ret

00000582 <_exit>:
 582:	f8 94       	cli

00000584 <__stop_program>:
 584:	ff cf       	rjmp	.-2      	; 0x584 <__stop_program>

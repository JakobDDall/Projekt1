
Samlet_projekt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800200  00000360  000003d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000360  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000003de  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000410  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  00000450  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000010a0  00000000  00000000  000004d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000d9c  00000000  00000000  00001578  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000061f  00000000  00000000  00002314  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000ec  00000000  00000000  00002934  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000061c  00000000  00000000  00002a20  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000019b  00000000  00000000  0000303c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  000031d7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	86 c0       	rjmp	.+268    	; 0x112 <__bad_interrupt>
   6:	00 00       	nop
   8:	84 c0       	rjmp	.+264    	; 0x112 <__bad_interrupt>
   a:	00 00       	nop
   c:	82 c0       	rjmp	.+260    	; 0x112 <__bad_interrupt>
   e:	00 00       	nop
  10:	80 c0       	rjmp	.+256    	; 0x112 <__bad_interrupt>
  12:	00 00       	nop
  14:	7e c0       	rjmp	.+252    	; 0x112 <__bad_interrupt>
  16:	00 00       	nop
  18:	7c c0       	rjmp	.+248    	; 0x112 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	7a c0       	rjmp	.+244    	; 0x112 <__bad_interrupt>
  1e:	00 00       	nop
  20:	78 c0       	rjmp	.+240    	; 0x112 <__bad_interrupt>
  22:	00 00       	nop
  24:	76 c0       	rjmp	.+236    	; 0x112 <__bad_interrupt>
  26:	00 00       	nop
  28:	74 c0       	rjmp	.+232    	; 0x112 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	72 c0       	rjmp	.+228    	; 0x112 <__bad_interrupt>
  2e:	00 00       	nop
  30:	70 c0       	rjmp	.+224    	; 0x112 <__bad_interrupt>
  32:	00 00       	nop
  34:	6e c0       	rjmp	.+220    	; 0x112 <__bad_interrupt>
  36:	00 00       	nop
  38:	6c c0       	rjmp	.+216    	; 0x112 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	6a c0       	rjmp	.+212    	; 0x112 <__bad_interrupt>
  3e:	00 00       	nop
  40:	68 c0       	rjmp	.+208    	; 0x112 <__bad_interrupt>
  42:	00 00       	nop
  44:	66 c0       	rjmp	.+204    	; 0x112 <__bad_interrupt>
  46:	00 00       	nop
  48:	64 c0       	rjmp	.+200    	; 0x112 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	62 c0       	rjmp	.+196    	; 0x112 <__bad_interrupt>
  4e:	00 00       	nop
  50:	60 c0       	rjmp	.+192    	; 0x112 <__bad_interrupt>
  52:	00 00       	nop
  54:	5e c0       	rjmp	.+188    	; 0x112 <__bad_interrupt>
  56:	00 00       	nop
  58:	5c c0       	rjmp	.+184    	; 0x112 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	5a c0       	rjmp	.+180    	; 0x112 <__bad_interrupt>
  5e:	00 00       	nop
  60:	58 c0       	rjmp	.+176    	; 0x112 <__bad_interrupt>
  62:	00 00       	nop
  64:	56 c0       	rjmp	.+172    	; 0x112 <__bad_interrupt>
  66:	00 00       	nop
  68:	54 c0       	rjmp	.+168    	; 0x112 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	52 c0       	rjmp	.+164    	; 0x112 <__bad_interrupt>
  6e:	00 00       	nop
  70:	50 c0       	rjmp	.+160    	; 0x112 <__bad_interrupt>
  72:	00 00       	nop
  74:	4e c0       	rjmp	.+156    	; 0x112 <__bad_interrupt>
  76:	00 00       	nop
  78:	4c c0       	rjmp	.+152    	; 0x112 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	4a c0       	rjmp	.+148    	; 0x112 <__bad_interrupt>
  7e:	00 00       	nop
  80:	48 c0       	rjmp	.+144    	; 0x112 <__bad_interrupt>
  82:	00 00       	nop
  84:	46 c0       	rjmp	.+140    	; 0x112 <__bad_interrupt>
  86:	00 00       	nop
  88:	44 c0       	rjmp	.+136    	; 0x112 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	42 c0       	rjmp	.+132    	; 0x112 <__bad_interrupt>
  8e:	00 00       	nop
  90:	40 c0       	rjmp	.+128    	; 0x112 <__bad_interrupt>
  92:	00 00       	nop
  94:	3e c0       	rjmp	.+124    	; 0x112 <__bad_interrupt>
  96:	00 00       	nop
  98:	3c c0       	rjmp	.+120    	; 0x112 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	3a c0       	rjmp	.+116    	; 0x112 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	38 c0       	rjmp	.+112    	; 0x112 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	36 c0       	rjmp	.+108    	; 0x112 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	34 c0       	rjmp	.+104    	; 0x112 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	32 c0       	rjmp	.+100    	; 0x112 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	30 c0       	rjmp	.+96     	; 0x112 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	2e c0       	rjmp	.+92     	; 0x112 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	2c c0       	rjmp	.+88     	; 0x112 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	2a c0       	rjmp	.+84     	; 0x112 <__bad_interrupt>
  be:	00 00       	nop
  c0:	28 c0       	rjmp	.+80     	; 0x112 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	26 c0       	rjmp	.+76     	; 0x112 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	24 c0       	rjmp	.+72     	; 0x112 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	22 c0       	rjmp	.+68     	; 0x112 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	20 c0       	rjmp	.+64     	; 0x112 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	1e c0       	rjmp	.+60     	; 0x112 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	1c c0       	rjmp	.+56     	; 0x112 <__bad_interrupt>
  da:	00 00       	nop
  dc:	1a c0       	rjmp	.+52     	; 0x112 <__bad_interrupt>
  de:	00 00       	nop
  e0:	18 c0       	rjmp	.+48     	; 0x112 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e0 e6       	ldi	r30, 0x60	; 96
  fc:	f3 e0       	ldi	r31, 0x03	; 3
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	aa 30       	cpi	r26, 0x0A	; 10
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	02 d0       	rcall	.+4      	; 0x114 <main>
 110:	25 c1       	rjmp	.+586    	; 0x35c <_exit>

00000112 <__bad_interrupt>:
 112:	76 cf       	rjmp	.-276    	; 0x0 <__vectors>

00000114 <main>:
int main(void)
{
    //-------------------------------------------- Initialisering --------------------------------------------
	
	//---------------Lyd-----------
	initUART();
 114:	97 d0       	rcall	.+302    	; 0x244 <initUART>
	
	//--------------Motor----------
	InitEngine();
 116:	41 d0       	rcall	.+130    	; 0x19a <InitEngine>
 118:	11 b8       	out	0x01, r1	; 1
	
	//--------------Refleks-----------
	
	
	
	DDRA = 0;
 11a:	02 c0       	rjmp	.+4      	; 0x120 <main+0xc>
	int reflexCount = 0;
	
	
	// ------------- Start bil ------------------
	while ((PINA & 1) != 0)
 11c:	10 92 d6 00 	sts	0x00D6, r1	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
	{
		UDR2 = 0;
 120:	00 99       	sbic	0x00, 0	; 0
	DDRA = 0;
	int reflexCount = 0;
	
	
	// ------------- Start bil ------------------
	while ((PINA & 1) != 0)
 122:	fc cf       	rjmp	.-8      	; 0x11c <main+0x8>
 124:	84 e6       	ldi	r24, 0x64	; 100
	{
		UDR2 = 0;
	}
	EngineControl(100);
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	42 d0       	rcall	.+132    	; 0x1ae <EngineControl>
	//KØRELYS
	StartLyd();
 12a:	9c d0       	rcall	.+312    	; 0x264 <StartLyd>
 12c:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12e:	87 e8       	ldi	r24, 0x87	; 135
 130:	93 e1       	ldi	r25, 0x13	; 19
 132:	21 50       	subi	r18, 0x01	; 1
 134:	80 40       	sbci	r24, 0x00	; 0
 136:	90 40       	sbci	r25, 0x00	; 0
 138:	e1 f7       	brne	.-8      	; 0x132 <main+0x1e>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <main+0x28>
 13c:	00 00       	nop
 13e:	c0 e0       	ldi	r28, 0x00	; 0
	//--------------Refleks-----------
	
	
	
	DDRA = 0;
	int reflexCount = 0;
 140:	d0 e0       	ldi	r29, 0x00	; 0
 142:	02 c0       	rjmp	.+4      	; 0x148 <main+0x34>
 144:	10 92 d6 00 	sts	0x00D6, r1	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
	// -------------------------------------- Main program loop ---------------------------------------------
	while(1)
	{
		while ((PINA & 1) != 0)
		{
			UDR2 = 0;
 148:	00 99       	sbic	0x00, 0	; 0
	StartLyd();
	_delay_ms(400);
	// -------------------------------------- Main program loop ---------------------------------------------
	while(1)
	{
		while ((PINA & 1) != 0)
 14a:	fc cf       	rjmp	.-8      	; 0x144 <main+0x30>
 14c:	21 96       	adiw	r28, 0x01	; 1
		{
			UDR2 = 0;
		}
		reflexCount++;
 14e:	c6 30       	cpi	r28, 0x06	; 6
		
		
		if(reflexCount == 6)
 150:	d1 05       	cpc	r29, r1
 152:	29 f4       	brne	.+10     	; 0x15e <main+0x4a>
		{
			EngineControl(-100);
 154:	8c e9       	ldi	r24, 0x9C	; 156
 156:	9f ef       	ldi	r25, 0xFF	; 255
 158:	2a d0       	rcall	.+84     	; 0x1ae <EngineControl>
 15a:	ae d0       	rcall	.+348    	; 0x2b8 <RefleksLyd>
			//BAKLYS
			RefleksLyd();
 15c:	14 c0       	rjmp	.+40     	; 0x186 <main+0x72>
 15e:	c8 30       	cpi	r28, 0x08	; 8
		}
		else if(reflexCount == 8)
 160:	d1 05       	cpc	r29, r1
 162:	29 f4       	brne	.+10     	; 0x16e <main+0x5a>
		{
			EngineControl(100);
 164:	84 e6       	ldi	r24, 0x64	; 100
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	22 d0       	rcall	.+68     	; 0x1ae <EngineControl>
 16a:	a6 d0       	rcall	.+332    	; 0x2b8 <RefleksLyd>
			//KØRELYS
			RefleksLyd();
 16c:	0c c0       	rjmp	.+24     	; 0x186 <main+0x72>
		}
		else if(reflexCount == 11)
 16e:	cb 30       	cpi	r28, 0x0B	; 11
 170:	d1 05       	cpc	r29, r1
 172:	29 f4       	brne	.+10     	; 0x17e <main+0x6a>
		{
			EngineControl(0);
 174:	80 e0       	ldi	r24, 0x00	; 0
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	1a d0       	rcall	.+52     	; 0x1ae <EngineControl>
			//SLUK LYS
			SlutLyd();
 17a:	c7 d0       	rcall	.+398    	; 0x30a <SlutLyd>
 17c:	04 c0       	rjmp	.+8      	; 0x186 <main+0x72>
 17e:	1c 16       	cp	r1, r28
		}
		else if(reflexCount > 0)
 180:	1d 06       	cpc	r1, r29
 182:	0c f4       	brge	.+2      	; 0x186 <main+0x72>
 184:	99 d0       	rcall	.+306    	; 0x2b8 <RefleksLyd>
		{
			RefleksLyd();
 186:	2f ef       	ldi	r18, 0xFF	; 255
 188:	83 ec       	ldi	r24, 0xC3	; 195
 18a:	99 e0       	ldi	r25, 0x09	; 9
 18c:	21 50       	subi	r18, 0x01	; 1
 18e:	80 40       	sbci	r24, 0x00	; 0
 190:	90 40       	sbci	r25, 0x00	; 0
 192:	e1 f7       	brne	.-8      	; 0x18c <main+0x78>
 194:	00 c0       	rjmp	.+0      	; 0x196 <main+0x82>
 196:	00 00       	nop
 198:	d7 cf       	rjmp	.-82     	; 0x148 <main+0x34>

0000019a <InitEngine>:
 */ 

#include <avr/io.h>

void InitEngine(void){
	DDRB = 0xFF; //port B as output
 19a:	8f ef       	ldi	r24, 0xFF	; 255
 19c:	84 b9       	out	0x04, r24	; 4
	PORTB = 0; //clear
 19e:	15 b8       	out	0x05, r1	; 5
	TCCR1A = 0b10100011; //PIN A og PIN B
 1a0:	83 ea       	ldi	r24, 0xA3	; 163
 1a2:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
	TCCR1B = 0b00000010; // 1kHz
 1a6:	82 e0       	ldi	r24, 0x02	; 2
 1a8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7c0081>
 1ac:	08 95       	ret

000001ae <EngineControl>:
}


void EngineControl(int Speed){
	
	if(Speed > 0){
 1ae:	18 16       	cp	r1, r24
 1b0:	19 06       	cpc	r1, r25
 1b2:	ac f4       	brge	.+42     	; 0x1de <EngineControl+0x30>
		OCR1B = 0;
 1b4:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7c008b>
 1b8:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7c008a>
		OCR1A = (Speed * 10) + 23;
 1bc:	9c 01       	movw	r18, r24
 1be:	22 0f       	add	r18, r18
 1c0:	33 1f       	adc	r19, r19
 1c2:	88 0f       	add	r24, r24
 1c4:	99 1f       	adc	r25, r25
 1c6:	88 0f       	add	r24, r24
 1c8:	99 1f       	adc	r25, r25
 1ca:	88 0f       	add	r24, r24
 1cc:	99 1f       	adc	r25, r25
 1ce:	82 0f       	add	r24, r18
 1d0:	93 1f       	adc	r25, r19
 1d2:	47 96       	adiw	r24, 0x17	; 23
 1d4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 1d8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
 1dc:	08 95       	ret
	} else if (Speed < 0){
 1de:	99 23       	and	r25, r25
 1e0:	94 f4       	brge	.+36     	; 0x206 <EngineControl+0x58>
		OCR1A = 0;
 1e2:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 1e6:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
		OCR1B = (Speed * -10) + 23;
 1ea:	46 ef       	ldi	r20, 0xF6	; 246
 1ec:	bc 01       	movw	r22, r24
 1ee:	46 03       	mulsu	r20, r22
 1f0:	90 01       	movw	r18, r0
 1f2:	47 9f       	mul	r20, r23
 1f4:	30 0d       	add	r19, r0
 1f6:	11 24       	eor	r1, r1
 1f8:	c9 01       	movw	r24, r18
 1fa:	47 96       	adiw	r24, 0x17	; 23
 1fc:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7c008b>
 200:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7c008a>
 204:	08 95       	ret
	} else if (Speed == 0){
 206:	89 2b       	or	r24, r25
 208:	41 f4       	brne	.+16     	; 0x21a <EngineControl+0x6c>
		OCR1A = 0;
 20a:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 20e:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
		OCR1B = 0;
 212:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7c008b>
 216:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7c008a>
 21a:	08 95       	ret

0000021c <SendCommand>:
	SendCommand(volMax);
}


void SendCommand(unsigned char command[])
{
 21c:	ac 01       	movw	r20, r24
	for(int i = 0; i<ARRAYSIZE; i++)
 21e:	20 e0       	ldi	r18, 0x00	; 0
 220:	30 e0       	ldi	r19, 0x00	; 0
 222:	0c c0       	rjmp	.+24     	; 0x23c <SendCommand+0x20>
	{
		while((UCSR2A & 0b00100000)==0)	 //Vent pï¿½ register er klar til at modtage byte
 224:	90 91 d0 00 	lds	r25, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7c00d0>
 228:	95 ff       	sbrs	r25, 5
 22a:	fc cf       	rjmp	.-8      	; 0x224 <SendCommand+0x8>
		{}
		UDR2 = command[i];
 22c:	fa 01       	movw	r30, r20
 22e:	e2 0f       	add	r30, r18
 230:	f3 1f       	adc	r31, r19
 232:	90 81       	ld	r25, Z
 234:	90 93 d6 00 	sts	0x00D6, r25	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
}


void SendCommand(unsigned char command[])
{
	for(int i = 0; i<ARRAYSIZE; i++)
 238:	2f 5f       	subi	r18, 0xFF	; 255
 23a:	3f 4f       	sbci	r19, 0xFF	; 255
 23c:	28 30       	cpi	r18, 0x08	; 8
 23e:	31 05       	cpc	r19, r1
 240:	8c f3       	brlt	.-30     	; 0x224 <SendCommand+0x8>
		{}
		UDR2 = command[i];
	}
	
	
}
 242:	08 95       	ret

00000244 <initUART>:



void initUART()
{
	UBRR2 = F_CPU/(16*(long int)9600) - 1; // Sï¿½t baud rate af output
 244:	87 e6       	ldi	r24, 0x67	; 103
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	90 93 d5 00 	sts	0x00D5, r25	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7c00d5>
 24c:	80 93 d4 00 	sts	0x00D4, r24	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7c00d4>
	UCSR2B = 0b00011000;
 250:	88 e1       	ldi	r24, 0x18	; 24
 252:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7c00d1>
	UCSR2C = 0b00000110;
 256:	86 e0       	ldi	r24, 0x06	; 6
 258:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7c00d2>

	SendCommand(volMax);
 25c:	80 e0       	ldi	r24, 0x00	; 0
 25e:	92 e0       	ldi	r25, 0x02	; 2
 260:	dd cf       	rjmp	.-70     	; 0x21c <SendCommand>
 262:	08 95       	ret

00000264 <StartLyd>:
	
}


void StartLyd()
{
 264:	cf 93       	push	r28
 266:	df 93       	push	r29
 268:	cd b7       	in	r28, 0x3d	; 61
 26a:	de b7       	in	r29, 0x3e	; 62
 26c:	29 97       	sbiw	r28, 0x09	; 9
 26e:	0f b6       	in	r0, 0x3f	; 63
 270:	f8 94       	cli
 272:	de bf       	out	0x3e, r29	; 62
 274:	0f be       	out	0x3f, r0	; 63
 276:	cd bf       	out	0x3d, r28	; 61
	unsigned char startSound[ARRAYSIZE+1] = {0x7E,0x0F,0x01,0x01,0x01,0xFF,0xEE,0xEF};		//Startlyden ligger i mappe 01, er fil 001. "7E 0F 00 01 01 FF EF EF".
 278:	fe 01       	movw	r30, r28
 27a:	31 96       	adiw	r30, 0x01	; 1
 27c:	89 e0       	ldi	r24, 0x09	; 9
 27e:	df 01       	movw	r26, r30
 280:	1d 92       	st	X+, r1
 282:	8a 95       	dec	r24
 284:	e9 f7       	brne	.-6      	; 0x280 <StartLyd+0x1c>
 286:	8e e7       	ldi	r24, 0x7E	; 126
 288:	89 83       	std	Y+1, r24	; 0x01
 28a:	8f e0       	ldi	r24, 0x0F	; 15
 28c:	8a 83       	std	Y+2, r24	; 0x02
 28e:	91 e0       	ldi	r25, 0x01	; 1
 290:	9b 83       	std	Y+3, r25	; 0x03
 292:	9c 83       	std	Y+4, r25	; 0x04
 294:	9d 83       	std	Y+5, r25	; 0x05
 296:	8f ef       	ldi	r24, 0xFF	; 255
 298:	8e 83       	std	Y+6, r24	; 0x06
 29a:	8e ee       	ldi	r24, 0xEE	; 238
 29c:	8f 83       	std	Y+7, r24	; 0x07
 29e:	8f ee       	ldi	r24, 0xEF	; 239
 2a0:	88 87       	std	Y+8, r24	; 0x08
	SendCommand(startSound);
 2a2:	cf 01       	movw	r24, r30
 2a4:	bb df       	rcall	.-138    	; 0x21c <SendCommand>
}
 2a6:	29 96       	adiw	r28, 0x09	; 9
 2a8:	0f b6       	in	r0, 0x3f	; 63
 2aa:	f8 94       	cli
 2ac:	de bf       	out	0x3e, r29	; 62
 2ae:	0f be       	out	0x3f, r0	; 63
 2b0:	cd bf       	out	0x3d, r28	; 61
 2b2:	df 91       	pop	r29
 2b4:	cf 91       	pop	r28
 2b6:	08 95       	ret

000002b8 <RefleksLyd>:


void RefleksLyd()
{
 2b8:	cf 93       	push	r28
 2ba:	df 93       	push	r29
 2bc:	cd b7       	in	r28, 0x3d	; 61
 2be:	de b7       	in	r29, 0x3e	; 62
 2c0:	29 97       	sbiw	r28, 0x09	; 9
 2c2:	0f b6       	in	r0, 0x3f	; 63
 2c4:	f8 94       	cli
 2c6:	de bf       	out	0x3e, r29	; 62
 2c8:	0f be       	out	0x3f, r0	; 63
 2ca:	cd bf       	out	0x3d, r28	; 61
	unsigned char reflexSound[ARRAYSIZE+1] = {0x7E,0x0F,0x00,0x01,0x02,0xFF,0xEE,0xEF};		//Reflexlyden ligger i mappe 01, er fil 002. "7E 0F 00 01 02 FF EF EF".
 2cc:	ce 01       	movw	r24, r28
 2ce:	01 96       	adiw	r24, 0x01	; 1
 2d0:	29 e0       	ldi	r18, 0x09	; 9
 2d2:	fc 01       	movw	r30, r24
 2d4:	11 92       	st	Z+, r1
 2d6:	2a 95       	dec	r18
 2d8:	e9 f7       	brne	.-6      	; 0x2d4 <RefleksLyd+0x1c>
 2da:	2e e7       	ldi	r18, 0x7E	; 126
 2dc:	29 83       	std	Y+1, r18	; 0x01
 2de:	2f e0       	ldi	r18, 0x0F	; 15
 2e0:	2a 83       	std	Y+2, r18	; 0x02
 2e2:	21 e0       	ldi	r18, 0x01	; 1
 2e4:	2c 83       	std	Y+4, r18	; 0x04
 2e6:	22 e0       	ldi	r18, 0x02	; 2
 2e8:	2d 83       	std	Y+5, r18	; 0x05
 2ea:	2f ef       	ldi	r18, 0xFF	; 255
 2ec:	2e 83       	std	Y+6, r18	; 0x06
 2ee:	2e ee       	ldi	r18, 0xEE	; 238
 2f0:	2f 83       	std	Y+7, r18	; 0x07
 2f2:	2f ee       	ldi	r18, 0xEF	; 239
 2f4:	28 87       	std	Y+8, r18	; 0x08
	SendCommand(reflexSound);
 2f6:	92 df       	rcall	.-220    	; 0x21c <SendCommand>
}
 2f8:	29 96       	adiw	r28, 0x09	; 9
 2fa:	0f b6       	in	r0, 0x3f	; 63
 2fc:	f8 94       	cli
 2fe:	de bf       	out	0x3e, r29	; 62
 300:	0f be       	out	0x3f, r0	; 63
 302:	cd bf       	out	0x3d, r28	; 61
 304:	df 91       	pop	r29
 306:	cf 91       	pop	r28
 308:	08 95       	ret

0000030a <SlutLyd>:


void SlutLyd()
{
 30a:	cf 93       	push	r28
 30c:	df 93       	push	r29
 30e:	cd b7       	in	r28, 0x3d	; 61
 310:	de b7       	in	r29, 0x3e	; 62
 312:	29 97       	sbiw	r28, 0x09	; 9
 314:	0f b6       	in	r0, 0x3f	; 63
 316:	f8 94       	cli
 318:	de bf       	out	0x3e, r29	; 62
 31a:	0f be       	out	0x3f, r0	; 63
 31c:	cd bf       	out	0x3d, r28	; 61
	unsigned char finishSound[ARRAYSIZE+1] = {0x7E,0x0F,0x00,0x01,0x03,0xFF,0xED,0xEF};		//Fï¿½rdiglyden ligger i mappe 01, er fil 003. "7E 0F 00 01 03 FF EF EF".
 31e:	ce 01       	movw	r24, r28
 320:	01 96       	adiw	r24, 0x01	; 1
 322:	29 e0       	ldi	r18, 0x09	; 9
 324:	fc 01       	movw	r30, r24
 326:	11 92       	st	Z+, r1
 328:	2a 95       	dec	r18
 32a:	e9 f7       	brne	.-6      	; 0x326 <SlutLyd+0x1c>
 32c:	2e e7       	ldi	r18, 0x7E	; 126
 32e:	29 83       	std	Y+1, r18	; 0x01
 330:	2f e0       	ldi	r18, 0x0F	; 15
 332:	2a 83       	std	Y+2, r18	; 0x02
 334:	21 e0       	ldi	r18, 0x01	; 1
 336:	2c 83       	std	Y+4, r18	; 0x04
 338:	23 e0       	ldi	r18, 0x03	; 3
 33a:	2d 83       	std	Y+5, r18	; 0x05
 33c:	2f ef       	ldi	r18, 0xFF	; 255
 33e:	2e 83       	std	Y+6, r18	; 0x06
 340:	2d ee       	ldi	r18, 0xED	; 237
 342:	2f 83       	std	Y+7, r18	; 0x07
 344:	2f ee       	ldi	r18, 0xEF	; 239
 346:	28 87       	std	Y+8, r18	; 0x08
	SendCommand(finishSound);
 348:	69 df       	rcall	.-302    	; 0x21c <SendCommand>
 34a:	29 96       	adiw	r28, 0x09	; 9
 34c:	0f b6       	in	r0, 0x3f	; 63
 34e:	f8 94       	cli
 350:	de bf       	out	0x3e, r29	; 62
 352:	0f be       	out	0x3f, r0	; 63
 354:	cd bf       	out	0x3d, r28	; 61
 356:	df 91       	pop	r29
 358:	cf 91       	pop	r28
 35a:	08 95       	ret

0000035c <_exit>:
 35c:	f8 94       	cli

0000035e <__stop_program>:
 35e:	ff cf       	rjmp	.-2      	; 0x35e <__stop_program>

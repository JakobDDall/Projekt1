
Hoejttaler.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  0000026e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001fa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800200  00800200  0000026e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000026e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000002e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f9c  00000000  00000000  00000320  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000da4  00000000  00000000  000012bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004e3  00000000  00000000  00002060  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000074  00000000  00000000  00002544  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000064e  00000000  00000000  000025b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001a3  00000000  00000000  00002c06  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00002da9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	81 c0       	rjmp	.+258    	; 0x108 <__bad_interrupt>
   6:	00 00       	nop
   8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
   a:	00 00       	nop
   c:	7d c0       	rjmp	.+250    	; 0x108 <__bad_interrupt>
   e:	00 00       	nop
  10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
  12:	00 00       	nop
  14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
  16:	00 00       	nop
  18:	77 c0       	rjmp	.+238    	; 0x108 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
  1e:	00 00       	nop
  20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
  22:	00 00       	nop
  24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
  26:	00 00       	nop
  28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	69 c0       	rjmp	.+210    	; 0x108 <__bad_interrupt>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	61 c0       	rjmp	.+194    	; 0x108 <__bad_interrupt>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
  52:	00 00       	nop
  54:	59 c0       	rjmp	.+178    	; 0x108 <__bad_interrupt>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
  5e:	00 00       	nop
  60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
  62:	00 00       	nop
  64:	51 c0       	rjmp	.+162    	; 0x108 <__bad_interrupt>
  66:	00 00       	nop
  68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	49 c0       	rjmp	.+146    	; 0x108 <__bad_interrupt>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
  7e:	00 00       	nop
  80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3b c0       	rjmp	.+118    	; 0x108 <__bad_interrupt>
  92:	00 00       	nop
  94:	39 c0       	rjmp	.+114    	; 0x108 <__bad_interrupt>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	29 c0       	rjmp	.+82     	; 0x108 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	27 c0       	rjmp	.+78     	; 0x108 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	25 c0       	rjmp	.+74     	; 0x108 <__bad_interrupt>
  be:	00 00       	nop
  c0:	23 c0       	rjmp	.+70     	; 0x108 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	1d c0       	rjmp	.+58     	; 0x108 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	1b c0       	rjmp	.+54     	; 0x108 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	a8 30       	cpi	r26, 0x08	; 8
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	4b d0       	rcall	.+150    	; 0x19c <main>
 106:	77 c0       	rjmp	.+238    	; 0x1f6 <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <command>:
}


void command()
{
	while((UCSR2A & 0b00100000)==0)		//Venter på at data registeret er tomt
 10a:	e0 ed       	ldi	r30, 0xD0	; 208
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	80 81       	ld	r24, Z
 110:	85 ff       	sbrs	r24, 5
 112:	fd cf       	rjmp	.-6      	; 0x10e <command+0x4>
	{}
	UDR2 = SomoMsg.start;
 114:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <_edata>
 118:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
	while((UCSR2A & 0b00100000)==0)		//Venter på at data registeret er tomt
 11c:	e0 ed       	ldi	r30, 0xD0	; 208
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	80 81       	ld	r24, Z
 122:	85 ff       	sbrs	r24, 5
 124:	fd cf       	rjmp	.-6      	; 0x120 <command+0x16>
	{}
	UDR2 = SomoMsg.cmd;
 126:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <_edata+0x1>
 12a:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
	while((UCSR2A & 0b00100000)==0)		//Venter på at data registeret er tomt
 12e:	e0 ed       	ldi	r30, 0xD0	; 208
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	80 81       	ld	r24, Z
 134:	85 ff       	sbrs	r24, 5
 136:	fd cf       	rjmp	.-6      	; 0x132 <command+0x28>
	{}
	UDR2 = (unsigned char)SomoMsg.feedback;
 138:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <_edata+0x2>
 13c:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
	while((UCSR2A & 0b00100000)==0)		//Venter på at data registeret er tomt
 140:	e0 ed       	ldi	r30, 0xD0	; 208
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	80 81       	ld	r24, Z
 146:	85 ff       	sbrs	r24, 5
 148:	fd cf       	rjmp	.-6      	; 0x144 <command+0x3a>
	{}
	UDR2 = SomoMsg.para1;
 14a:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <_edata+0x3>
 14e:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
	while((UCSR2A & 0b00100000)==0)		//Venter på at data registeret er tomt
 152:	e0 ed       	ldi	r30, 0xD0	; 208
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	80 81       	ld	r24, Z
 158:	85 ff       	sbrs	r24, 5
 15a:	fd cf       	rjmp	.-6      	; 0x156 <command+0x4c>
	{}
	UDR2 = SomoMsg.para2;
 15c:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <_edata+0x4>
 160:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
	while((UCSR2A & 0b00100000)==0)		//Venter på at data registeret er tomt
 164:	e0 ed       	ldi	r30, 0xD0	; 208
 166:	f0 e0       	ldi	r31, 0x00	; 0
 168:	80 81       	ld	r24, Z
 16a:	85 ff       	sbrs	r24, 5
 16c:	fd cf       	rjmp	.-6      	; 0x168 <command+0x5e>
	{}
	UDR2 = SomoMsg.checksum1;
 16e:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <_edata+0x5>
 172:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
	while((UCSR2A & 0b00100000)==0)		//Venter på at data registeret er tomt
 176:	e0 ed       	ldi	r30, 0xD0	; 208
 178:	f0 e0       	ldi	r31, 0x00	; 0
 17a:	80 81       	ld	r24, Z
 17c:	85 ff       	sbrs	r24, 5
 17e:	fd cf       	rjmp	.-6      	; 0x17a <command+0x70>
	{}
	UDR2 = SomoMsg.checksum2;
 180:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <_edata+0x6>
 184:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
	while((UCSR2A & 0b00100000)==0)		//Venter på at data registeret er tomt
 188:	e0 ed       	ldi	r30, 0xD0	; 208
 18a:	f0 e0       	ldi	r31, 0x00	; 0
 18c:	80 81       	ld	r24, Z
 18e:	85 ff       	sbrs	r24, 5
 190:	fd cf       	rjmp	.-6      	; 0x18c <command+0x82>
	{}
	UDR2 = SomoMsg.end;
 192:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <_edata+0x7>
 196:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
 19a:	08 95       	ret

0000019c <main>:



		
		
		UBRR2 = 103;//F_CPU/(16*9600) - 1;
 19c:	87 e6       	ldi	r24, 0x67	; 103
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	90 93 d5 00 	sts	0x00D5, r25	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7000d5>
 1a4:	80 93 d4 00 	sts	0x00D4, r24	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>
		UCSR2B = 0b00011000;
 1a8:	88 e1       	ldi	r24, 0x18	; 24
 1aa:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7000d1>
		UCSR2C = 0b00000110;
 1ae:	86 e0       	ldi	r24, 0x06	; 6
 1b0:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7000d2>
		
		SomoMsg.start = 0x7E;
 1b4:	c0 e0       	ldi	r28, 0x00	; 0
 1b6:	d2 e0       	ldi	r29, 0x02	; 2
 1b8:	0f 2e       	mov	r0, r31
 1ba:	fe e7       	ldi	r31, 0x7E	; 126
 1bc:	ff 2e       	mov	r15, r31
 1be:	f0 2d       	mov	r31, r0
 1c0:	f8 82       	st	Y, r15
		SomoMsg.cmd = 0x06;
 1c2:	89 83       	std	Y+1, r24	; 0x01
		SomoMsg.feedback = 0x00;
 1c4:	1a 82       	std	Y+2, r1	; 0x02
		SomoMsg.para1 = 0x00;
 1c6:	1b 82       	std	Y+3, r1	; 0x03
		SomoMsg.para2 = 0x1E;
 1c8:	8e e1       	ldi	r24, 0x1E	; 30
 1ca:	8c 83       	std	Y+4, r24	; 0x04
		SomoMsg.checksum1 = 0xFF;
 1cc:	1f ef       	ldi	r17, 0xFF	; 255
 1ce:	1d 83       	std	Y+5, r17	; 0x05
		SomoMsg.checksum2 = 0xDC;
 1d0:	8c ed       	ldi	r24, 0xDC	; 220
 1d2:	8e 83       	std	Y+6, r24	; 0x06
		SomoMsg.end = 0xEF;
 1d4:	0f ee       	ldi	r16, 0xEF	; 239
 1d6:	0f 83       	std	Y+7, r16	; 0x07
		
		
		command();
 1d8:	98 df       	rcall	.-208    	; 0x10a <command>
		
		SomoMsg.start = 0x7E;
 1da:	f8 82       	st	Y, r15
		SomoMsg.cmd = 0x01;
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	89 83       	std	Y+1, r24	; 0x01
		SomoMsg.feedback = 0x00;
 1e0:	1a 82       	std	Y+2, r1	; 0x02
		SomoMsg.para1 = 0x00;
 1e2:	1b 82       	std	Y+3, r1	; 0x03
		SomoMsg.para2 = 0x00;
 1e4:	1c 82       	std	Y+4, r1	; 0x04
		SomoMsg.checksum1 = 0xFF;
 1e6:	1d 83       	std	Y+5, r17	; 0x05
		SomoMsg.checksum2 = 0xFF;
 1e8:	1e 83       	std	Y+6, r17	; 0x06
		
		//Det er som om nogle af bytesne er vendt om. F.eks. 0x0F ligner 0xF0 i waveforms
		
		while(1)
		{
			command();
 1ea:	0f 83       	std	Y+7, r16	; 0x07
 1ec:	8e df       	rcall	.-228    	; 0x10a <command>
			for (int i = 0; i < 10000000000000000; i++)
			{
				UDR2 = 0x00;
 1ee:	e6 ed       	ldi	r30, 0xD6	; 214
 1f0:	f0 e0       	ldi	r31, 0x00	; 0
 1f2:	10 82       	st	Z, r1
 1f4:	fe cf       	rjmp	.-4      	; 0x1f2 <main+0x56>

000001f6 <_exit>:
 1f6:	f8 94       	cli

000001f8 <__stop_program>:
 1f8:	ff cf       	rjmp	.-2      	; 0x1f8 <__stop_program>
